Index: src/DAY02-CollectionsFramework/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/.idea/vcs.xml b/src/DAY02-CollectionsFramework/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739258369836)
+++ b/src/DAY02-CollectionsFramework/.idea/vcs.xml	(date 1739258369836)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystemSecond/InsurancePolicyManagementSystemSecond.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystemSecond/InsurancePolicyManagementSystemSecond.java b/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystemSecond/InsurancePolicyManagementSystemSecond.java
new file mode 100644
--- /dev/null	(date 1739422510768)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystemSecond/InsurancePolicyManagementSystemSecond.java	(date 1739422510768)
@@ -0,0 +1,146 @@
+/*
+Insurance Policy Management System
+
+Build a system for managing insurance policies where you have to:
+Store and manage policies with unique identifiers.
+Retrieve and manipulate policies based on different criteria.
+Track policies by various attributes such as policyholder name and expiry date.
+
+Requirements:
+1. Store Policies in a Map:
+Use HashMap to store policies with policy numbers as keys and policy
+details as values.
+Use LinkedHashMap to maintain the insertion order of policies.
+Use TreeMap to store policies sorted by expiry date.
+
+2. Retrieve and Manipulate Policies:
+Implement methods to:
+Retrieve a policy by its number.
+List all policies expiring within the next 30 days.
+List all policies for a specific policyholder.
+Remove policies that are expired.
+*/
+package com.insurancepolicymanagementsystemSecond;
+import  java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+import java.util.*;
+
+class Policy {
+    private final String policyNumber;
+    private final String policyholderName;
+    private final LocalDate expiryDate;
+
+    public Policy(String policyNumber, String policyholderName, LocalDate expiryDate) {
+        this.policyNumber = policyNumber;
+        this.policyholderName = policyholderName;
+        this.expiryDate = expiryDate;
+    }
+
+    public String getPolicyNumber() {
+        return policyNumber;
+    }
+
+    public String getPolicyholderName() {
+        return policyholderName;
+    }
+
+    public LocalDate getExpiryDate() {
+        return expiryDate;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        Policy policy = (Policy) obj;
+        return Objects.equals(policyNumber, policy.policyNumber);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(policyNumber);
+    }
+
+    @Override
+    public String toString() {
+        return "Policy{" +
+                "policyNumber='" + policyNumber + '\'' +
+                ", policyholderName='" + policyholderName + '\'' +
+                ", expiryDate=" + expiryDate +
+                '}';
+    }
+}
+
+class PolicyManagementSystem {
+    private final Map<String, Policy> policyMap = new HashMap<>();
+    private final Map<String, Policy> policyLinkedMap = new LinkedHashMap<>();
+    private final TreeMap<LocalDate, List<Policy>> policyTreeMap = new TreeMap<>();
+
+    public void addPolicy(Policy policy) {
+        policyMap.put(policy.getPolicyNumber(), policy);
+        policyLinkedMap.put(policy.getPolicyNumber(), policy);
+
+        policyTreeMap.computeIfAbsent(policy.getExpiryDate(), k -> new ArrayList<>()).add(policy);
+    }
+
+    public Policy getPolicyByNumber(String policyNumber) {
+        return policyMap.get(policyNumber);
+    }
+
+    public List<Policy> getPoliciesExpiringIn30Days() {
+        List<Policy> expiringPolicies = new ArrayList<>();
+        LocalDate now = LocalDate.now();
+        LocalDate next30Days = now.plusDays(30);
+
+        for (Map.Entry<LocalDate, List<Policy>> entry : policyTreeMap.subMap(now.plusDays(1), true, next30Days, true).entrySet()) {
+            expiringPolicies.addAll(entry.getValue());
+        }
+        return expiringPolicies;
+    }
+
+    public List<Policy> getPoliciesByPolicyholder(String policyholderName) {
+        List<Policy> policies = new ArrayList<>();
+        for (Policy policy : policyLinkedMap.values()) {
+            if (policy.getPolicyholderName().equalsIgnoreCase(policyholderName)) {
+                policies.add(policy);
+            }
+        }
+        return policies;
+    }
+
+    public void removeExpiredPolicies() {
+        LocalDate now = LocalDate.now();
+        while (!policyTreeMap.isEmpty() && policyTreeMap.firstKey().isBefore(now)) {
+            List<Policy> expiredPolicies = policyTreeMap.pollFirstEntry().getValue();
+            for (Policy policy : expiredPolicies) {
+                policyMap.remove(policy.getPolicyNumber());
+                policyLinkedMap.remove(policy.getPolicyNumber());
+            }
+        }
+    }
+}
+
+public class InsurancePolicyManagementSystemSecond {
+    public static void main(String[] args) {
+        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
+        PolicyManagementSystem system = new PolicyManagementSystem();
+
+        Policy policy1 = new Policy("123", "Alice", LocalDate.parse("2025-03-01", dtf));
+        Policy policy2 = new Policy("456", "Bob", LocalDate.parse("2025-02-25", dtf));
+        Policy policy3 = new Policy("789", "Alice", LocalDate.parse("2025-04-15", dtf));
+
+        system.addPolicy(policy1);
+        system.addPolicy(policy2);
+        system.addPolicy(policy3);
+
+        System.out.println("Policy with number 123: " + system.getPolicyByNumber("123"));
+
+        System.out.println("Policies expiring in 30 days: " + system.getPoliciesExpiringIn30Days());
+
+        System.out.println("Policies for Alice: " + system.getPoliciesByPolicyholder("Alice"));
+
+        system.removeExpiredPolicies();
+
+        System.out.println("All policies after removing expired ones: " + system.getPoliciesByPolicyholder("Alice"));
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/findthekeywiththehighestvalue/FindTheKeyWithTheHighestValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/findthekeywiththehighestvalue/FindTheKeyWithTheHighestValue.java b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/findthekeywiththehighestvalue/FindTheKeyWithTheHighestValue.java
new file mode 100644
--- /dev/null	(date 1739353557987)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/findthekeywiththehighestvalue/FindTheKeyWithTheHighestValue.java	(date 1739353557987)
@@ -0,0 +1,46 @@
+/*
+Find the Key with the Highest Value
+Given a Map<String, Integer>, find the key with the maximum value.
+Example:
+Input: {A=10, B=20, C=15} → Output: B.
+*/
+
+package com.mapinterface.findthekeywiththehighestvalue;
+import java.util.*;
+
+public class FindTheKeyWithTheHighestValue {
+
+    public static void main(String[] args) {
+        // Example map
+        Map<String, Integer> map = new HashMap<>();
+        map.put("A", 10);
+        map.put("B", 20);
+        map.put("C", 15);
+
+        // Find the key with the highest value
+        String keyWithMaxValue = findKeyWithMaxValue(map);
+
+        // Output the result
+        System.out.println("Key with the highest value: " + keyWithMaxValue);
+    }
+
+    // Method to find the key with the highest value
+    public static String findKeyWithMaxValue(Map<String, Integer> map) {
+        // Initialize variables to track the maximum value and the associated key
+        String keyWithMaxValue = null;
+        int maxValue = Integer.MIN_VALUE;
+
+        // Iterate through the map entries
+        for (Map.Entry<String, Integer> entry : map.entrySet()) {
+            // Compare the current value with the max value
+            if (entry.getValue() > maxValue) {
+                maxValue = entry.getValue();
+                keyWithMaxValue = entry.getKey();
+            }
+        }
+
+        // Return the key with the maximum value
+        return keyWithMaxValue;
+    }
+}
+
Index: src/DAY03-JavaStreams/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/.idea/misc.xml b/src/DAY03-JavaStreams/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739440222304)
+++ b/src/DAY03-JavaStreams/.idea/misc.xml	(date 1739440222304)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/.idea/encodings.xml b/src/DAY03-JavaStreams/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739440222324)
+++ b/src/DAY03-JavaStreams/.idea/encodings.xml	(date 1739440222324)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/.idea/vcs.xml b/src/DAY03-JavaStreams/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739440222339)
+++ b/src/DAY03-JavaStreams/.idea/vcs.xml	(date 1739440222339)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/resources/SampleFile.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/SampleFile.txt b/src/DAY03-JavaStreams/src/main/resources/SampleFile.txt
new file mode 100644
--- /dev/null	(date 1739440520515)
+++ b/src/DAY03-JavaStreams/src/main/resources/SampleFile.txt	(date 1739440520515)
@@ -0,0 +1,1 @@
+The cat sat on the windowsill, watching birds fly by. She poured herself a cup of coffee and took a deep breath. The sun was setting behind the mountains, painting the sky orange. He couldn't believe how quickly the week had passed. The library was silent except for the occasional rustle of pages. A gentle breeze made the leaves dance on the pavement. The old clock in the hallway chimed at midnight. His hands trembled as he opened the letter. The smell of fresh bread filled the kitchen. They walked along the beach, their footprints vanishing behind them. A distant thunderstorm rumbled across the sky. She tied her hair into a ponytail and started running. The train station was bustling with people rushing to catch their trains. He stared at the blank canvas, unsure where to begin. A single candle flickered on the table. The puppy wagged its tail excitedly. The sound of rain tapping against the window was soothing. She found an old photograph tucked inside a book. The coffee shop was crowded, but she managed to find a quiet corner. His heart pounded as he stepped onto the stage. A stray cat followed him home. The garden was overgrown with wildflowers. She traced patterns on the foggy window with her finger. The old man told stories of his youth by the fireplace. The wind howled through the trees. She held onto the railing as the boat rocked. The bakery smelled of cinnamon and vanilla. The detective examined the footprints carefully. They watched the stars from the rooftop. He adjusted his tie before walking into the meeting. The candlelight cast dancing shadows on the wall. A violin played softly in the background. The alley was dark and narrow. She dipped her brush into the paint and started a new masterpiece. The waves crashed against the rocks. He found a key under the doormat. The little girl giggled as she chased the butterflies. The bookstore had a comforting smell of old paper and ink. A crow cawed from the top of the fence. The radio played an old jazz tune. He took a deep breath before diving into the pool. A rainbow appeared after the storm. She whispered a wish before blowing out the candles. The clock hands moved slower than usual. He scribbled a note in his journal. The baby clutched his finger tightly. The fireplace crackled as they sipped hot chocolate. She twirled in her new dress. The leaves crunched under their feet. A cat stretched lazily on the windowsill. He adjusted his glasses and continued reading. The bridge swayed slightly in the wind. The fog rolled in, obscuring the distant hills. She smiled at the memory of their last adventure. The old typewriter clicked and clacked as he wrote. The bell tower chimed, signaling the end of the day. They shared an umbrella as the rain poured down. The bicycle tires hummed against the pavement. A firefly flickered in the dark. The elevator doors opened with a soft ding. She arranged the flowers in a vase. A dog barked in the distance. The tea kettle whistled on the stove. He ran his fingers over the smooth marble surface. The attic was filled with forgotten treasures. The carnival lights sparkled against the night sky. She laced up her hiking boots. The scent of pine filled the air. A butterfly landed on her hand. The campfire crackled and sent sparks into the air. The bookshelf was filled with stories waiting to be read. He hummed a tune as he washed the dishes. The thunder rumbled closer. She traced the stars with her finger. The old radio crackled to life. A single red balloon floated into the sky. The notebook was filled with doodles and scribbles. The ocean breeze was refreshing. The key turned in the lock with a soft click. She adjusted her scarf and stepped outside. The cobblestone streets were damp from the rain. He watched the sunrise with a cup of coffee. A feather drifted down from the sky. The plane soared above the clouds. The kitten meowed softly. The candle burned down to a tiny stub. She pushed the swing gently. The garden gate creaked as it swung open. The fish swam lazily in the pond. He dusted off an old record and placed it on the turntable. The rollercoaster climbed higher and higher. The scent of fresh-cut grass filled the air. A shooting star streaked across the night sky. The echo of laughter filled the empty hallway. She blew bubbles into the air. The popcorn machine whirred to life. A cat curled up on his lap. The church bells rang in the distance. The wind chimes tinkled softly. The streetlights flickered to life. He tossed a pebble into the lake. The umbrella turned inside out in the wind. She wrapped herself in a warm blanket. The car engine hummed smoothly. The candlelight dinner was perfect. The violinist played with closed eyes. The fireflies twinkled like tiny stars. He sketched a quick drawing in his notebook. The sand felt warm beneath her feet. The sound of a distant train echoed through the valley. She counted the freckles on his face. A lighthouse stood tall against the stormy sea. The lemonade was perfectly sweet and tangy. A dog chased its tail in circles. The curtains fluttered in the breeze. He plucked a daisy and tucked it behind her ear. The boardwalk smelled of salt and fried food. The air was thick with the scent of blooming flowers. The bookstore owner smiled as he recognized a returning customer. The fountain water glistened under the sun. The cicadas buzzed in the summer heat. The snowflakes melted as they touched her skin. A lost sock lay lonely in the laundry room. The paper plane glided across the room. The fireworks burst into vibrant colors. A spider spun its web in the corner of the ceiling. The sunrise painted the sky in shades of pink and gold. The mailman whistled as he delivered letters. A squirrel darted up the tree trunk. The museum was quiet except for the sound of footsteps. The clouds drifted lazily across the sky. The carnival music played in the background. The smell of fresh paint lingered in the air. The street performer juggled flaming torches. The violin case lay open beside him. The attic stairs creaked under his weight. The bakery shelves were lined with delicious pastries. The old train station was full of history. The scent of rain filled the air before the storm. A cat napped in the sunbeam. The ice cubes clinked in the glass. The curtains swayed gently. The echo of a bell rang in the empty corridor. The tide rolled in slowly. She traced a heart in the sand. The smell of coffee filled the small café. A lone wolf howled in the distance. The wind carried the scent of fresh roses. The sound of waves crashing was calming. The lantern flickered as the wind blew. A gentle drizzle coated the streets. The candle melted into a pool of wax. The clock tower loomed over the town square. A book fell off the shelf with a soft thud. The ferry rocked gently on the water. The moon reflected on the lake’s surface. The door creaked open slowly. The old record player played a scratchy tune. The river flowed smoothly over the rocks. The breeze carried the sound of laughter. The scent of rain and earth mixed in the air. The clouds turned golden as the sun set. The leaves rustled underfoot. A kitten chased a ball of yarn. The sound of a harp echoed through the hall. The coffee shop door jingled as she entered. The flickering candle cast eerie shadows. The cat purred softly on the windowsill. The lighthouse beacon rotated steadily. The sound of wind rustling through trees was peaceful. The sun dipped below the horizon, ending another day.
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/java/com/pipedstreams_interthreadcommunication/PipedStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/pipedstreams_interthreadcommunication/PipedStream.java b/src/DAY03-JavaStreams/src/main/java/com/pipedstreams_interthreadcommunication/PipedStream.java
new file mode 100644
--- /dev/null	(date 1739440822178)
+++ b/src/DAY03-JavaStreams/src/main/java/com/pipedstreams_interthreadcommunication/PipedStream.java	(date 1739440822178)
@@ -0,0 +1,87 @@
+/*
+. Piped Streams - Inter-Thread Communication
+📌 Problem Statement:
+Implement a Java program where one thread writes data into a PipedOutputStream and another thread reads data from a PipedInputStream.
+Requirements:
+Use two threads for reading and writing.
+Synchronize properly to prevent data loss.
+Handle IOException.
+*/
+package com.pipedstreams_interthreadcommunication;
+import java.io.*;
+
+class WriterThread extends Thread {
+    private PipedOutputStream pos;
+
+    public WriterThread(PipedOutputStream pos) {
+        this.pos = pos;
+    }
+
+    @Override
+    public void run() {
+        try {
+            String message = "Hello from Writer Thread!";
+            // Convert message to bytes and write to the pipe
+            pos.write(message.getBytes());
+            System.out.println("WriterThread: Data written to the pipe.");
+        } catch (IOException e) {
+            System.err.println("WriterThread Error: " + e.getMessage());
+        } finally {
+            try {
+                pos.close(); // Close the stream after writing
+            } catch (IOException e) {
+                System.err.println("Error closing PipedOutputStream: " + e.getMessage());
+            }
+        }
+    }
+}
+
+class ReaderThread extends Thread {
+    private PipedInputStream pis;
+
+    public ReaderThread(PipedInputStream pis) {
+        this.pis = pis;
+    }
+
+    @Override
+    public void run() {
+        try {
+            byte[] buffer = new byte[1024]; // Buffer to store read data
+            int bytesRead = pis.read(buffer); // Read data from the pipe
+            String receivedMessage = new String(buffer, 0, bytesRead); // Convert bytes to String
+            System.out.println("ReaderThread: Received -> " + receivedMessage);
+        } catch (IOException e) {
+            System.err.println("ReaderThread Error: " + e.getMessage());
+        } finally {
+            try {
+                pis.close(); // Close the stream after reading
+            } catch (IOException e) {
+                System.err.println("Error closing PipedInputStream: " + e.getMessage());
+            }
+        }
+    }
+}
+
+public class PipedStream {
+    public static void main(String[] args) {
+        try {
+            // Create piped streams
+            PipedOutputStream pos = new PipedOutputStream();
+            PipedInputStream pis = new PipedInputStream(pos); // Connect streams
+
+            // Create and start threads
+            WriterThread writer = new WriterThread(pos);
+            ReaderThread reader = new ReaderThread(pis);
+
+            writer.start();
+            reader.start();
+
+            // Ensure threads complete execution before exiting main method
+            writer.join();
+            reader.join();
+        } catch (IOException | InterruptedException e) {
+            System.err.println("Main Thread Error: " + e.getMessage());
+        }
+    }
+}
+
Index: src/DAY03-JavaStreams/src/main/java/com/datastreams_storeandretrieveprimitivedata/DataStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/datastreams_storeandretrieveprimitivedata/DataStream.java b/src/DAY03-JavaStreams/src/main/java/com/datastreams_storeandretrieveprimitivedata/DataStream.java
new file mode 100644
--- /dev/null	(date 1739443211933)
+++ b/src/DAY03-JavaStreams/src/main/java/com/datastreams_storeandretrieveprimitivedata/DataStream.java	(date 1739443211933)
@@ -0,0 +1,61 @@
+/*
+Data Streams - Store and Retrieve Primitive Data
+📌 Problem Statement:
+Write a Java program that stores student details (roll number, name, GPA) in a binary file and retrieves it later.
+Requirements:
+Use DataOutputStream to write primitive data.
+Use DataInputStream to read data.
+Ensure proper closing of resources.
+ */
+package com.datastreams_storeandretrieveprimitivedata;
+import java.io.*;
+
+public class DataStream {
+    public static void main(String[] args) {
+        String fileName = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\StudentDetails.txt"; // Binary file to store student details
+
+        // Writing student details to the file
+        writeStudentData(fileName);
+
+        // Reading and displaying student details from the file
+        readStudentData(fileName);
+    }
+
+    // Method to write student details to a binary file
+    private static void writeStudentData(String fileName) {
+        try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(fileName))) {
+            // Writing multiple student records
+            dos.writeInt(101); // Roll Number
+            dos.writeUTF("Alice Johnson"); // Name
+            dos.writeDouble(3.8); // GPA
+
+            dos.writeInt(102);
+            dos.writeUTF("Bob Smith");
+            dos.writeDouble(3.5);
+
+            dos.writeInt(103);
+            dos.writeUTF("Charlie Brown");
+            dos.writeDouble(3.9);
+
+            System.out.println("Student details successfully written to " + fileName);
+        } catch (IOException e) {
+            System.err.println("Error writing to file: " + e.getMessage());
+        }
+    }
+
+    // Method to read and display student details from the binary file
+    private static void readStudentData(String fileName) {
+        try (DataInputStream dis = new DataInputStream(new FileInputStream(fileName))) {
+            System.out.println("\nReading student details from " + fileName + ":");
+            while (dis.available() > 0) { // Check if there is data left to read
+                int rollNo = dis.readInt();
+                String name = dis.readUTF();
+                double gpa = dis.readDouble();
+                System.out.println("Roll No: " + rollNo + ", Name: " + name + ", GPA: " + gpa);
+            }
+        } catch (IOException e) {
+            System.err.println("Error reading from file: " + e.getMessage());
+        }
+    }
+}
+
Index: src/DAY03-JavaStreams/src/main/java/com/filehandling_readandwriteatextfile/FileHandling.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/filehandling_readandwriteatextfile/FileHandling.java b/src/DAY03-JavaStreams/src/main/java/com/filehandling_readandwriteatextfile/FileHandling.java
new file mode 100644
--- /dev/null	(date 1739443933442)
+++ b/src/DAY03-JavaStreams/src/main/java/com/filehandling_readandwriteatextfile/FileHandling.java	(date 1739443933442)
@@ -0,0 +1,42 @@
+/*
+1. File Handling - Read and Write a Text File
+📌 Problem Statement:
+Write a Java program that reads the contents of a text file and writes it into a new file. If the source file does not exist, display an appropriate message.
+Requirements:
+Use FileInputStream and FileOutputStream.
+Handle IOException properly.
+Ensure that the destination file is created if it does not exist.
+*/
+package com.filehandling_readandwriteatextfile;
+import java.io.*;
+
+public class FileHandling {
+    public static void main(String[] args) {
+        // Source and destination file paths
+        String sourceFile = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\source.txt"; // Change this to your source file path
+        String destinationFile = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\destination.txt"; // Change this to your destination file path
+
+        // FileInputStream for reading the source file
+        // FileOutputStream for writing to the destination file
+        try (FileInputStream fis = new FileInputStream(sourceFile);
+             FileOutputStream fos = new FileOutputStream(destinationFile)) {
+
+            // Buffer to hold file data
+            byte[] buffer = new byte[1024];
+            int bytesRead;
+
+            // Read from source and write to destination
+            while ((bytesRead = fis.read(buffer)) != -1) {
+                fos.write(buffer, 0, bytesRead);
+            }
+
+            System.out.println("File copied successfully!");
+
+        } catch (FileNotFoundException e) {
+            System.out.println("Error: Source file not found!");
+        } catch (IOException e) {
+            System.out.println("Error: An IO exception occurred!");
+            e.printStackTrace();
+        }
+    }
+}
Index: src/DAY03-JavaStreams/src/main/java/com/bufferedstreams_efficientfilecopy/BufferedStreams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/bufferedstreams_efficientfilecopy/BufferedStreams.java b/src/DAY03-JavaStreams/src/main/java/com/bufferedstreams_efficientfilecopy/BufferedStreams.java
new file mode 100644
--- /dev/null	(date 1739444141535)
+++ b/src/DAY03-JavaStreams/src/main/java/com/bufferedstreams_efficientfilecopy/BufferedStreams.java	(date 1739444141535)
@@ -0,0 +1,64 @@
+/*
+Buffered Streams - Efficient File Copy
+📌 Problem Statement:
+Create a Java program that copies a large file (e.g., 100MB) from one location to another using Buffered Streams (BufferedInputStream and BufferedOutputStream). Compare the performance with normal file streams.
+Requirements:
+Read and write in chunks of 4 KB (4096 bytes).
+Use System.nanoTime() to measure execution time.
+Compare execution time with unbuffered streams.
+ */
+package com.bufferedstreams_efficientfilecopy;
+import java.io.*;
+
+public class BufferedStreams {
+    public static void main(String[] args) {
+        // Define source and destination file paths
+        String sourceFile = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\SampleFile.txt";  // Replace with your actual file path
+        String destinationBuffered = "copy_buffered.txt";
+        String destinationUnbuffered = "copy_unbuffered.txt";
+
+        // Measure time for unbuffered file copy
+        long unbufferedTime = copyFileUnbuffered(sourceFile, destinationUnbuffered);
+        System.out.println("Unbuffered Copy Time: " + unbufferedTime + " ns (" + (unbufferedTime / 1_000_000) + " ms)");
+
+        // Measure time for buffered file copy
+        long bufferedTime = copyFileBuffered(sourceFile, destinationBuffered);
+        System.out.println("Buffered Copy Time: " + bufferedTime + " ns (" + (bufferedTime / 1_000_000) + " ms)");
+
+        // Compare performance
+        System.out.println("\nBuffered copy was " + (double) unbufferedTime / bufferedTime + " times faster than unbuffered copy.");
+    }
+
+    private static long copyFileUnbuffered(String source, String destination) {
+        long startTime = System.nanoTime();
+        try (FileInputStream fis = new FileInputStream(source);
+             FileOutputStream fos = new FileOutputStream(destination)) {
+
+            byte[] buffer = new byte[4096]; // 4 KB buffer
+            int bytesRead;
+            while ((bytesRead = fis.read(buffer)) != -1) {
+                fos.write(buffer, 0, bytesRead);
+            }
+        } catch (IOException e) {
+            System.out.println("Error in unbuffered copy: " + e.getMessage());
+        }
+        return System.nanoTime() - startTime;
+    }
+
+    private static long copyFileBuffered(String source, String destination) {
+        long startTime = System.nanoTime();
+        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(source));
+             BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destination))) {
+
+            byte[] buffer = new byte[4096]; // 4 KB buffer
+            int bytesRead;
+            while ((bytesRead = bis.read(buffer)) != -1) {
+                bos.write(buffer, 0, bytesRead);
+            }
+        } catch (IOException e) {
+            System.out.println("Error in buffered copy: " + e.getMessage());
+        }
+        return System.nanoTime() - startTime;
+    }
+}
+
Index: src/DAY03-JavaStreams/src/main/java/com/filterstreams_convertuppercasetolowercase/FilterStreams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/filterstreams_convertuppercasetolowercase/FilterStreams.java b/src/DAY03-JavaStreams/src/main/java/com/filterstreams_convertuppercasetolowercase/FilterStreams.java
new file mode 100644
--- /dev/null	(date 1739443497254)
+++ b/src/DAY03-JavaStreams/src/main/java/com/filterstreams_convertuppercasetolowercase/FilterStreams.java	(date 1739443497254)
@@ -0,0 +1,38 @@
+/*
+Filter Streams - Convert Uppercase to Lowercase
+📌 Problem Statement:
+Create a program that reads a text file and writes its contents into another file, converting all uppercase letters to lowercase.
+Requirements:
+Use FileReader and FileWriter.
+Use BufferedReader and BufferedWriter for efficiency.
+Handle character encoding issues.
+ */
+package com.filterstreams_convertuppercasetolowercase;
+import java.io.*;
+
+public class FilterStreams {
+    public static void main(String[] args) {
+        // Define input and output file names
+        String inputFile = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\UpperCaseCharacter.txt";   // Input file path
+        String outputFile = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\LowerCaseCharacter.txt"; // Output file path
+
+        // Use try-with-resources to handle file operations
+        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
+             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
+
+            String line;
+            // Read the file line by line
+            while ((line = reader.readLine()) != null) {
+                // Convert the line to lowercase and write it to the output file
+                writer.write(line.toLowerCase());
+                writer.newLine(); // Add a new line after writing each line
+            }
+
+            System.out.println("File conversion completed. Check " + outputFile);
+        } catch (IOException e) {
+            // Handle exceptions related to file reading/writing
+            System.err.println("An error occurred: " + e.getMessage());
+        }
+    }
+}
+
Index: src/DAY03-JavaStreams/src/main/java/com/readuserinputfromconsole/UserInfoToFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/readuserinputfromconsole/UserInfoToFile.java b/src/DAY03-JavaStreams/src/main/java/com/readuserinputfromconsole/UserInfoToFile.java
new file mode 100644
--- /dev/null	(date 1739441873306)
+++ b/src/DAY03-JavaStreams/src/main/java/com/readuserinputfromconsole/UserInfoToFile.java	(date 1739441873306)
@@ -0,0 +1,45 @@
+/*
+Read User Input from Console
+📌 Problem Statement:
+Write a program that asks the user for their name, age, and favorite programming language, then saves this information into a file.
+Requirements:
+Use BufferedReader for console input.
+Use FileWriter to write the data into a file.
+Handle exceptions properly.
+*/
+package com.readuserinputfromconsole;
+import java.io.*;
+
+public class UserInfoToFile {
+    public static void main(String[] args) {
+        // Define the output file name
+        String outputFile = "user_info.txt";
+
+        // Using BufferedReader for console input
+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
+             FileWriter writer = new FileWriter(outputFile)) {
+
+            // Prompting user for details
+            System.out.print("Enter your name: ");
+            String name = reader.readLine();
+
+            System.out.print("Enter your age: ");
+            String age = reader.readLine();
+
+            System.out.print("Enter your favorite programming language: ");
+            String language = reader.readLine();
+
+            // Writing user data to file
+            writer.write("User Information:\n");
+            writer.write("Name: " + name + "\n");
+            writer.write("Age: " + age + "\n");
+            writer.write("Favorite Programming Language: " + language + "\n");
+
+            System.out.println("User information saved successfully to " + outputFile);
+
+        } catch (IOException e) {
+            System.out.println("Error: An I/O exception occurred!");
+            e.printStackTrace();
+        }
+    }
+}
Index: src/DAY03-JavaStreams/src/main/java/com/readalargefilelinebyline/LargeFileReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/readalargefilelinebyline/LargeFileReader.java b/src/DAY03-JavaStreams/src/main/java/com/readalargefilelinebyline/LargeFileReader.java
new file mode 100644
--- /dev/null	(date 1739442773329)
+++ b/src/DAY03-JavaStreams/src/main/java/com/readalargefilelinebyline/LargeFileReader.java	(date 1739442773329)
@@ -0,0 +1,35 @@
+/*
+Read a Large File Line by Line
+📌 Problem Statement:
+Develop a Java program that efficiently reads a large text file (500MB+) line by line and prints only lines containing the word "error".
+Requirements:
+Use BufferedReader for efficient reading.
+Read line-by-line instead of loading the entire file.
+Display only lines containing "error" (case insensitive).
+*/
+package com.readalargefilelinebyline;
+import java.io.*;
+
+public class LargeFileReader {
+    public static void main(String[] args) {
+        String filePath = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\SampleFile.txt"; // Specify the large file path
+
+        // Use try-with-resources to ensure automatic resource management
+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
+            String line;
+            System.out.println("Lines containing 'error':\n");
+
+            // Read the file line by line
+            while ((line = reader.readLine()) != null) {
+                // Check if the line contains "error" (case insensitive)
+                if (line.toLowerCase().contains("error")) {
+                    System.out.println(line);
+                }
+            }
+
+        } catch (IOException e) {
+            // Handle file-related exceptions
+            System.err.println("Error reading file: " + e.getMessage());
+        }
+    }
+}
Index: src/DAY03-JavaStreams/src/main/java/com/bytearraystream_convertimagetobytearray/ByteArrayStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/bytearraystream_convertimagetobytearray/ByteArrayStream.java b/src/DAY03-JavaStreams/src/main/java/com/bytearraystream_convertimagetobytearray/ByteArrayStream.java
new file mode 100644
--- /dev/null	(date 1739443707776)
+++ b/src/DAY03-JavaStreams/src/main/java/com/bytearraystream_convertimagetobytearray/ByteArrayStream.java	(date 1739443707776)
@@ -0,0 +1,60 @@
+/*
+ByteArray Stream - Convert Image to ByteArray
+📌 Problem Statement:
+Write a Java program that converts an image file into a byte array and then writes it back to another image file.
+Requirements:
+Use ByteArrayInputStream and ByteArrayOutputStream.
+Verify that the new file is identical to the original image.
+Handle IOException.
+*/
+package com.bytearraystream_convertimagetobytearray;
+import java.io.*;
+
+public class ByteArrayStream {
+    public static void main(String[] args) {
+        // Define source and destination image file paths
+        String sourceImage = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\OriginalImage.jpg";  // Replace with your image file path
+        String destinationImage = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\NewImage.jpg";  // Output image file
+
+        try {
+            // Convert image to byte array
+            byte[] imageData = imageToByteArray(sourceImage);
+
+            // Write byte array back to new image file
+            byteArrayToImage(imageData, destinationImage);
+
+            System.out.println("Image copied successfully!");
+
+        } catch (IOException e) {
+            System.out.println("Error: An I/O exception occurred!");
+            e.printStackTrace();
+        }
+    }
+    private static byte[] imageToByteArray(String imagePath) throws IOException {
+        try (FileInputStream fis = new FileInputStream(imagePath);
+             ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
+
+            byte[] buffer = new byte[4096]; // 4 KB buffer
+            int bytesRead;
+
+            while ((bytesRead = fis.read(buffer)) != -1) {
+                baos.write(buffer, 0, bytesRead);
+            }
+
+            return baos.toByteArray(); // Convert to byte array
+        }
+    }
+
+    private static void byteArrayToImage(byte[] imageData, String outputPath) throws IOException {
+        try (ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
+             FileOutputStream fos = new FileOutputStream(outputPath)) {
+
+            byte[] buffer = new byte[4096]; // 4 KB buffer
+            int bytesRead;
+
+            while ((bytesRead = bais.read(buffer)) != -1) {
+                fos.write(buffer, 0, bytesRead);
+            }
+        }
+    }
+}
Index: src/DAY03-JavaStreams/src/main/java/com/serialization_saveandretrieveanobject/serialization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/serialization_saveandretrieveanobject/serialization.java b/src/DAY03-JavaStreams/src/main/java/com/serialization_saveandretrieveanobject/serialization.java
new file mode 100644
--- /dev/null	(date 1739442353957)
+++ b/src/DAY03-JavaStreams/src/main/java/com/serialization_saveandretrieveanobject/serialization.java	(date 1739442353957)
@@ -0,0 +1,111 @@
+/*
+ Serialization - Save and Retrieve an Object
+📌 Problem Statement:
+Design a Java program that allows a user to store a list of employees in a file using Object Serialization and later retrieve the data from the file.
+Requirements:
+Create an Employee class with fields: id, name, department, salary.
+Serialize the list of employees into a file (ObjectOutputStream).
+Deserialize and display the employees from the file (ObjectInputStream).
+Handle ClassNotFoundException and IOException.
+*/
+package com.serialization_saveandretrieveanobject;
+import java.io.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+
+// Employee class implementing Serializable
+class Employee implements Serializable {
+    private static final long serialVersionUID = 1L; // Ensures compatibility during deserialization
+    private int id;
+    private String name;
+    private String department;
+    private double salary;
+
+    // Constructor
+    public Employee(int id, String name, String department, double salary) {
+        this.id = id;
+        this.name = name;
+        this.department = department;
+        this.salary = salary;
+    }
+
+    // Method to display employee details
+    public void displayEmployee() {
+        System.out.println("ID: " + id + ", Name: " + name + ", Department: " + department + ", Salary: " + salary);
+    }
+}
+
+public class serialization {
+    private static final String FILE_NAME = "employees.dat"; // Serialized file
+
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+        List<Employee> employees = new ArrayList<>();
+
+        // Taking user input for employees
+        System.out.print("Enter number of employees: ");
+        int count = scanner.nextInt();
+        scanner.nextLine(); // Consume newline
+
+        for (int i = 0; i < count; i++) {
+            System.out.println("Enter details for Employee " + (i + 1));
+            System.out.print("ID: ");
+            int id = scanner.nextInt();
+            scanner.nextLine(); // Consume newline
+
+            System.out.print("Name: ");
+            String name = scanner.nextLine();
+
+            System.out.print("Department: ");
+            String department = scanner.nextLine();
+
+            System.out.print("Salary: ");
+            double salary = scanner.nextDouble();
+            scanner.nextLine(); // Consume newline
+
+            employees.add(new Employee(id, name, department, salary));
+        }
+
+        // Serialize employee list
+        serializeEmployees(employees);
+
+        // Deserialize and display employee data
+        deserializeEmployees();
+
+        scanner.close();
+    }
+
+    /**
+     * Serializes the list of employees and saves to a file
+     */
+    private static void serializeEmployees(List<Employee> employees) {
+        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
+            oos.writeObject(employees);
+            System.out.println("\nEmployees serialized successfully!");
+        } catch (IOException e) {
+            System.out.println("Error during serialization: " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Deserializes the list of employees from a file and displays them
+     */
+    private static void deserializeEmployees() {
+        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
+            List<Employee> employees = (List<Employee>) ois.readObject();
+            System.out.println("\nDeserialized Employees:");
+            for (Employee emp : employees) {
+                emp.displayEmployee();
+            }
+        } catch (IOException e) {
+            System.out.println("Error during deserialization: " + e.getMessage());
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            System.out.println("Class not found during deserialization!");
+            e.printStackTrace();
+        }
+    }
+}
+
Index: src/DAY03-JavaStreams/src/main/resources/StudentDetails.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/StudentDetails.txt b/src/DAY03-JavaStreams/src/main/resources/StudentDetails.txt
new file mode 100644
--- /dev/null	(date 1739443214334)
+++ b/src/DAY03-JavaStreams/src/main/resources/StudentDetails.txt	(date 1739443214334)
@@ -0,0 +1,3 @@
+   e 
+Alice Johnson@ffffff   f 	Bob Smith@         g 
+Charlie Brown@333333
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/resources/UpperCaseCharacter.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/UpperCaseCharacter.txt b/src/DAY03-JavaStreams/src/main/resources/UpperCaseCharacter.txt
new file mode 100644
--- /dev/null	(date 1739443382244)
+++ b/src/DAY03-JavaStreams/src/main/resources/UpperCaseCharacter.txt	(date 1739443382244)
@@ -0,0 +1,1 @@
+Mohit Soni!
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/resources/LowerCaseCharacter.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/LowerCaseCharacter.txt b/src/DAY03-JavaStreams/src/main/resources/LowerCaseCharacter.txt
new file mode 100644
--- /dev/null	(date 1739443499615)
+++ b/src/DAY03-JavaStreams/src/main/resources/LowerCaseCharacter.txt	(date 1739443499615)
@@ -0,0 +1,1 @@
+mohit soni!
Index: src/DAY03-JavaStreams/user_info.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/user_info.txt b/src/DAY03-JavaStreams/user_info.txt
new file mode 100644
--- /dev/null	(date 1739443790294)
+++ b/src/DAY03-JavaStreams/user_info.txt	(date 1739443790294)
@@ -0,0 +1,4 @@
+User Information:
+Name: mohit
+Age: 234
+Favorite Programming Language: java
Index: src/DAY03-JavaStreams/src/main/resources/source.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/source.txt b/src/DAY03-JavaStreams/src/main/resources/source.txt
new file mode 100644
--- /dev/null	(date 1739442616665)
+++ b/src/DAY03-JavaStreams/src/main/resources/source.txt	(date 1739442616665)
@@ -0,0 +1,1 @@
+hello!!!!!!!!!!!!!!!!!!!
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/resources/destination.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/resources/destination.txt b/src/DAY03-JavaStreams/src/main/resources/destination.txt
new file mode 100644
--- /dev/null	(date 1739443935384)
+++ b/src/DAY03-JavaStreams/src/main/resources/destination.txt	(date 1739443935384)
@@ -0,0 +1,1 @@
+hello!!!!!!!!!!!!!!!!!!!
\ No newline at end of file
Index: src/DAY03-JavaStreams/copy_buffered.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/copy_buffered.txt b/src/DAY03-JavaStreams/copy_buffered.txt
new file mode 100644
--- /dev/null	(date 1739444095815)
+++ b/src/DAY03-JavaStreams/copy_buffered.txt	(date 1739444095815)
@@ -0,0 +1,1 @@
+The cat sat on the windowsill, watching birds fly by. She poured herself a cup of coffee and took a deep breath. The sun was setting behind the mountains, painting the sky orange. He couldn't believe how quickly the week had passed. The library was silent except for the occasional rustle of pages. A gentle breeze made the leaves dance on the pavement. The old clock in the hallway chimed at midnight. His hands trembled as he opened the letter. The smell of fresh bread filled the kitchen. They walked along the beach, their footprints vanishing behind them. A distant thunderstorm rumbled across the sky. She tied her hair into a ponytail and started running. The train station was bustling with people rushing to catch their trains. He stared at the blank canvas, unsure where to begin. A single candle flickered on the table. The puppy wagged its tail excitedly. The sound of rain tapping against the window was soothing. She found an old photograph tucked inside a book. The coffee shop was crowded, but she managed to find a quiet corner. His heart pounded as he stepped onto the stage. A stray cat followed him home. The garden was overgrown with wildflowers. She traced patterns on the foggy window with her finger. The old man told stories of his youth by the fireplace. The wind howled through the trees. She held onto the railing as the boat rocked. The bakery smelled of cinnamon and vanilla. The detective examined the footprints carefully. They watched the stars from the rooftop. He adjusted his tie before walking into the meeting. The candlelight cast dancing shadows on the wall. A violin played softly in the background. The alley was dark and narrow. She dipped her brush into the paint and started a new masterpiece. The waves crashed against the rocks. He found a key under the doormat. The little girl giggled as she chased the butterflies. The bookstore had a comforting smell of old paper and ink. A crow cawed from the top of the fence. The radio played an old jazz tune. He took a deep breath before diving into the pool. A rainbow appeared after the storm. She whispered a wish before blowing out the candles. The clock hands moved slower than usual. He scribbled a note in his journal. The baby clutched his finger tightly. The fireplace crackled as they sipped hot chocolate. She twirled in her new dress. The leaves crunched under their feet. A cat stretched lazily on the windowsill. He adjusted his glasses and continued reading. The bridge swayed slightly in the wind. The fog rolled in, obscuring the distant hills. She smiled at the memory of their last adventure. The old typewriter clicked and clacked as he wrote. The bell tower chimed, signaling the end of the day. They shared an umbrella as the rain poured down. The bicycle tires hummed against the pavement. A firefly flickered in the dark. The elevator doors opened with a soft ding. She arranged the flowers in a vase. A dog barked in the distance. The tea kettle whistled on the stove. He ran his fingers over the smooth marble surface. The attic was filled with forgotten treasures. The carnival lights sparkled against the night sky. She laced up her hiking boots. The scent of pine filled the air. A butterfly landed on her hand. The campfire crackled and sent sparks into the air. The bookshelf was filled with stories waiting to be read. He hummed a tune as he washed the dishes. The thunder rumbled closer. She traced the stars with her finger. The old radio crackled to life. A single red balloon floated into the sky. The notebook was filled with doodles and scribbles. The ocean breeze was refreshing. The key turned in the lock with a soft click. She adjusted her scarf and stepped outside. The cobblestone streets were damp from the rain. He watched the sunrise with a cup of coffee. A feather drifted down from the sky. The plane soared above the clouds. The kitten meowed softly. The candle burned down to a tiny stub. She pushed the swing gently. The garden gate creaked as it swung open. The fish swam lazily in the pond. He dusted off an old record and placed it on the turntable. The rollercoaster climbed higher and higher. The scent of fresh-cut grass filled the air. A shooting star streaked across the night sky. The echo of laughter filled the empty hallway. She blew bubbles into the air. The popcorn machine whirred to life. A cat curled up on his lap. The church bells rang in the distance. The wind chimes tinkled softly. The streetlights flickered to life. He tossed a pebble into the lake. The umbrella turned inside out in the wind. She wrapped herself in a warm blanket. The car engine hummed smoothly. The candlelight dinner was perfect. The violinist played with closed eyes. The fireflies twinkled like tiny stars. He sketched a quick drawing in his notebook. The sand felt warm beneath her feet. The sound of a distant train echoed through the valley. She counted the freckles on his face. A lighthouse stood tall against the stormy sea. The lemonade was perfectly sweet and tangy. A dog chased its tail in circles. The curtains fluttered in the breeze. He plucked a daisy and tucked it behind her ear. The boardwalk smelled of salt and fried food. The air was thick with the scent of blooming flowers. The bookstore owner smiled as he recognized a returning customer. The fountain water glistened under the sun. The cicadas buzzed in the summer heat. The snowflakes melted as they touched her skin. A lost sock lay lonely in the laundry room. The paper plane glided across the room. The fireworks burst into vibrant colors. A spider spun its web in the corner of the ceiling. The sunrise painted the sky in shades of pink and gold. The mailman whistled as he delivered letters. A squirrel darted up the tree trunk. The museum was quiet except for the sound of footsteps. The clouds drifted lazily across the sky. The carnival music played in the background. The smell of fresh paint lingered in the air. The street performer juggled flaming torches. The violin case lay open beside him. The attic stairs creaked under his weight. The bakery shelves were lined with delicious pastries. The old train station was full of history. The scent of rain filled the air before the storm. A cat napped in the sunbeam. The ice cubes clinked in the glass. The curtains swayed gently. The echo of a bell rang in the empty corridor. The tide rolled in slowly. She traced a heart in the sand. The smell of coffee filled the small café. A lone wolf howled in the distance. The wind carried the scent of fresh roses. The sound of waves crashing was calming. The lantern flickered as the wind blew. A gentle drizzle coated the streets. The candle melted into a pool of wax. The clock tower loomed over the town square. A book fell off the shelf with a soft thud. The ferry rocked gently on the water. The moon reflected on the lake’s surface. The door creaked open slowly. The old record player played a scratchy tune. The river flowed smoothly over the rocks. The breeze carried the sound of laughter. The scent of rain and earth mixed in the air. The clouds turned golden as the sun set. The leaves rustled underfoot. A kitten chased a ball of yarn. The sound of a harp echoed through the hall. The coffee shop door jingled as she entered. The flickering candle cast eerie shadows. The cat purred softly on the windowsill. The lighthouse beacon rotated steadily. The sound of wind rustling through trees was peaceful. The sun dipped below the horizon, ending another day.
\ No newline at end of file
Index: src/DAY03-JavaStreams/copy_unbuffered.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/copy_unbuffered.txt b/src/DAY03-JavaStreams/copy_unbuffered.txt
new file mode 100644
--- /dev/null	(date 1739444095803)
+++ b/src/DAY03-JavaStreams/copy_unbuffered.txt	(date 1739444095803)
@@ -0,0 +1,1 @@
+The cat sat on the windowsill, watching birds fly by. She poured herself a cup of coffee and took a deep breath. The sun was setting behind the mountains, painting the sky orange. He couldn't believe how quickly the week had passed. The library was silent except for the occasional rustle of pages. A gentle breeze made the leaves dance on the pavement. The old clock in the hallway chimed at midnight. His hands trembled as he opened the letter. The smell of fresh bread filled the kitchen. They walked along the beach, their footprints vanishing behind them. A distant thunderstorm rumbled across the sky. She tied her hair into a ponytail and started running. The train station was bustling with people rushing to catch their trains. He stared at the blank canvas, unsure where to begin. A single candle flickered on the table. The puppy wagged its tail excitedly. The sound of rain tapping against the window was soothing. She found an old photograph tucked inside a book. The coffee shop was crowded, but she managed to find a quiet corner. His heart pounded as he stepped onto the stage. A stray cat followed him home. The garden was overgrown with wildflowers. She traced patterns on the foggy window with her finger. The old man told stories of his youth by the fireplace. The wind howled through the trees. She held onto the railing as the boat rocked. The bakery smelled of cinnamon and vanilla. The detective examined the footprints carefully. They watched the stars from the rooftop. He adjusted his tie before walking into the meeting. The candlelight cast dancing shadows on the wall. A violin played softly in the background. The alley was dark and narrow. She dipped her brush into the paint and started a new masterpiece. The waves crashed against the rocks. He found a key under the doormat. The little girl giggled as she chased the butterflies. The bookstore had a comforting smell of old paper and ink. A crow cawed from the top of the fence. The radio played an old jazz tune. He took a deep breath before diving into the pool. A rainbow appeared after the storm. She whispered a wish before blowing out the candles. The clock hands moved slower than usual. He scribbled a note in his journal. The baby clutched his finger tightly. The fireplace crackled as they sipped hot chocolate. She twirled in her new dress. The leaves crunched under their feet. A cat stretched lazily on the windowsill. He adjusted his glasses and continued reading. The bridge swayed slightly in the wind. The fog rolled in, obscuring the distant hills. She smiled at the memory of their last adventure. The old typewriter clicked and clacked as he wrote. The bell tower chimed, signaling the end of the day. They shared an umbrella as the rain poured down. The bicycle tires hummed against the pavement. A firefly flickered in the dark. The elevator doors opened with a soft ding. She arranged the flowers in a vase. A dog barked in the distance. The tea kettle whistled on the stove. He ran his fingers over the smooth marble surface. The attic was filled with forgotten treasures. The carnival lights sparkled against the night sky. She laced up her hiking boots. The scent of pine filled the air. A butterfly landed on her hand. The campfire crackled and sent sparks into the air. The bookshelf was filled with stories waiting to be read. He hummed a tune as he washed the dishes. The thunder rumbled closer. She traced the stars with her finger. The old radio crackled to life. A single red balloon floated into the sky. The notebook was filled with doodles and scribbles. The ocean breeze was refreshing. The key turned in the lock with a soft click. She adjusted her scarf and stepped outside. The cobblestone streets were damp from the rain. He watched the sunrise with a cup of coffee. A feather drifted down from the sky. The plane soared above the clouds. The kitten meowed softly. The candle burned down to a tiny stub. She pushed the swing gently. The garden gate creaked as it swung open. The fish swam lazily in the pond. He dusted off an old record and placed it on the turntable. The rollercoaster climbed higher and higher. The scent of fresh-cut grass filled the air. A shooting star streaked across the night sky. The echo of laughter filled the empty hallway. She blew bubbles into the air. The popcorn machine whirred to life. A cat curled up on his lap. The church bells rang in the distance. The wind chimes tinkled softly. The streetlights flickered to life. He tossed a pebble into the lake. The umbrella turned inside out in the wind. She wrapped herself in a warm blanket. The car engine hummed smoothly. The candlelight dinner was perfect. The violinist played with closed eyes. The fireflies twinkled like tiny stars. He sketched a quick drawing in his notebook. The sand felt warm beneath her feet. The sound of a distant train echoed through the valley. She counted the freckles on his face. A lighthouse stood tall against the stormy sea. The lemonade was perfectly sweet and tangy. A dog chased its tail in circles. The curtains fluttered in the breeze. He plucked a daisy and tucked it behind her ear. The boardwalk smelled of salt and fried food. The air was thick with the scent of blooming flowers. The bookstore owner smiled as he recognized a returning customer. The fountain water glistened under the sun. The cicadas buzzed in the summer heat. The snowflakes melted as they touched her skin. A lost sock lay lonely in the laundry room. The paper plane glided across the room. The fireworks burst into vibrant colors. A spider spun its web in the corner of the ceiling. The sunrise painted the sky in shades of pink and gold. The mailman whistled as he delivered letters. A squirrel darted up the tree trunk. The museum was quiet except for the sound of footsteps. The clouds drifted lazily across the sky. The carnival music played in the background. The smell of fresh paint lingered in the air. The street performer juggled flaming torches. The violin case lay open beside him. The attic stairs creaked under his weight. The bakery shelves were lined with delicious pastries. The old train station was full of history. The scent of rain filled the air before the storm. A cat napped in the sunbeam. The ice cubes clinked in the glass. The curtains swayed gently. The echo of a bell rang in the empty corridor. The tide rolled in slowly. She traced a heart in the sand. The smell of coffee filled the small café. A lone wolf howled in the distance. The wind carried the scent of fresh roses. The sound of waves crashing was calming. The lantern flickered as the wind blew. A gentle drizzle coated the streets. The candle melted into a pool of wax. The clock tower loomed over the town square. A book fell off the shelf with a soft thud. The ferry rocked gently on the water. The moon reflected on the lake’s surface. The door creaked open slowly. The old record player played a scratchy tune. The river flowed smoothly over the rocks. The breeze carried the sound of laughter. The scent of rain and earth mixed in the air. The clouds turned golden as the sun set. The leaves rustled underfoot. A kitten chased a ball of yarn. The sound of a harp echoed through the hall. The coffee shop door jingled as she entered. The flickering candle cast eerie shadows. The cat purred softly on the windowsill. The lighthouse beacon rotated steadily. The sound of wind rustling through trees was peaceful. The sun dipped below the horizon, ending another day.
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/.gitignore b/src/DAY04-ExceptionHandling/.gitignore
new file mode 100644
--- /dev/null	(date 1739524952821)
+++ b/src/DAY04-ExceptionHandling/.gitignore	(date 1739524952821)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/src/main/java/org/example/Main.java b/src/DAY04-ExceptionHandling/src/main/java/org/example/Main.java
new file mode 100644
--- /dev/null	(date 1739524952832)
+++ b/src/DAY04-ExceptionHandling/src/main/java/org/example/Main.java	(date 1739524952832)
@@ -0,0 +1,17 @@
+package org.example;
+
+//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
+// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
+public class Main {
+    public static void main(String[] args) {
+        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
+        // to see how IntelliJ IDEA suggests fixing it.
+        System.out.printf("Hello and welcome!");
+
+        for (int i = 1; i <= 5; i++) {
+            //TIP Press <shortcut actionId="Debug"/> to start debugging your code. We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
+            // for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.
+            System.out.println("i = " + i);
+        }
+    }
+}
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/pom.xml b/src/DAY04-ExceptionHandling/pom.xml
new file mode 100644
--- /dev/null	(date 1739524960604)
+++ b/src/DAY04-ExceptionHandling/pom.xml	(date 1739524960604)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>DAY04-ExceptionHandling</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/.idea/misc.xml b/src/DAY04-ExceptionHandling/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739524957732)
+++ b/src/DAY04-ExceptionHandling/.idea/misc.xml	(date 1739524957732)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/.idea/.gitignore b/src/DAY04-ExceptionHandling/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739524963081)
+++ b/src/DAY04-ExceptionHandling/.idea/.gitignore	(date 1739524963081)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY04-ExceptionHandling/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/.idea/encodings.xml b/src/DAY04-ExceptionHandling/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739525760589)
+++ b/src/DAY04-ExceptionHandling/.idea/encodings.xml	(date 1739525760589)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY04-ExceptionHandling/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY04-ExceptionHandling/.idea/vcs.xml b/src/DAY04-ExceptionHandling/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739525760602)
+++ b/src/DAY04-ExceptionHandling/.idea/vcs.xml	(date 1739525760602)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739257587963)
+++ b/.idea/vcs.xml	(date 1739257587963)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/module-info.java b/src/module-info.java
new file mode 100644
--- /dev/null	(date 1739258048089)
+++ b/src/module-info.java	(date 1739258048089)
@@ -0,0 +1,3 @@
+module Week {
+    requires kotlin.stdlib;
+}
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/.gitignore b/src/DAY05-Regex&Junit/Regex/.gitignore
new file mode 100644
--- /dev/null	(date 1739603752347)
+++ b/src/DAY05-Regex&Junit/Regex/.gitignore	(date 1739603752347)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/src/main/java/org/example/Main.java b/src/DAY05-Regex&Junit/Regex/src/main/java/org/example/Main.java
new file mode 100644
--- /dev/null	(date 1739603752358)
+++ b/src/DAY05-Regex&Junit/Regex/src/main/java/org/example/Main.java	(date 1739603752358)
@@ -0,0 +1,17 @@
+package org.example;
+
+//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
+// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
+public class Main {
+    public static void main(String[] args) {
+        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
+        // to see how IntelliJ IDEA suggests fixing it.
+        System.out.printf("Hello and welcome!");
+
+        for (int i = 1; i <= 5; i++) {
+            //TIP Press <shortcut actionId="Debug"/> to start debugging your code. We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
+            // for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.
+            System.out.println("i = " + i);
+        }
+    }
+}
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/pom.xml b/src/DAY05-Regex&Junit/Regex/pom.xml
new file mode 100644
--- /dev/null	(date 1739603800732)
+++ b/src/DAY05-Regex&Junit/Regex/pom.xml	(date 1739603800732)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>Regex</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/.idea/misc.xml b/src/DAY05-Regex&Junit/Regex/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739603757180)
+++ b/src/DAY05-Regex&Junit/Regex/.idea/misc.xml	(date 1739603757180)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/.idea/.gitignore b/src/DAY05-Regex&Junit/Regex/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739603762296)
+++ b/src/DAY05-Regex&Junit/Regex/.idea/.gitignore	(date 1739603762296)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY01-Generics/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/.idea/misc.xml b/src/DAY01-Generics/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739424430127)
+++ b/src/DAY01-Generics/.idea/misc.xml	(date 1739424430127)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY01-Generics/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/pom.xml b/src/DAY01-Generics/pom.xml
new file mode 100644
--- /dev/null	(date 1739424446252)
+++ b/src/DAY01-Generics/pom.xml	(date 1739424446252)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>DAYO1-Generics</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: src/DAY01-Generics/src/main/java/com/universitycoursemanagementsystem/UniversityCourseManagementSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/universitycoursemanagementsystem/UniversityCourseManagementSystem.java b/src/DAY01-Generics/src/main/java/com/universitycoursemanagementsystem/UniversityCourseManagementSystem.java
new file mode 100644
--- /dev/null	(date 1739424704445)
+++ b/src/DAY01-Generics/src/main/java/com/universitycoursemanagementsystem/UniversityCourseManagementSystem.java	(date 1739424704445)
@@ -0,0 +1,105 @@
+/*
+Multi-Level University Course Management System
+Concepts: Generic Classes, Wildcards, Bounded Type Parameters
+Problem Statement:
+Develop a university course management system where different departments offer courses with different evaluation types (e.g., Exam-Based, Assignment-Based, Research-Based).
+Hints:
+Create an abstract class CourseType (e.g., ExamCourse, AssignmentCourse, ResearchCourse).
+Implement a generic class Course<T extends CourseType> to manage different courses.
+Use wildcards (List<? extends CourseType>) to handle any type of course dynamically.
+
+*/
+
+package com.universitycoursemanagementsystem;
+
+import java.util.ArrayList;
+import java.util.List;
+abstract class CourseType {
+    private String courseName;
+    private String instructor;
+
+    public CourseType(String courseName, String instructor) {
+        this.courseName = courseName;
+        this.instructor = instructor;
+    }
+
+    public String getCourseName() { return courseName; }
+    public String getInstructor() { return instructor; }
+
+    @Override
+    public String toString() {
+        return courseName + " (Instructor: " + instructor + ")";
+    }
+}
+class ExamCourse extends CourseType {
+    public ExamCourse(String courseName, String instructor) {
+        super(courseName, instructor);
+    }
+}
+
+class AssignmentCourse extends CourseType {
+    public AssignmentCourse(String courseName, String instructor) {
+        super(courseName, instructor);
+    }
+}
+
+class ResearchCourse extends CourseType {
+    public ResearchCourse(String courseName, String instructor) {
+        super(courseName, instructor);
+    }
+}
+
+// Generic class
+class Course<T extends CourseType> {
+    private List<T> courses = new ArrayList<>();
+
+    public void addCourse(T course) {
+        courses.add(course);
+    }
+
+    public void displayCourses() {
+        System.out.println("Courses Offered:");
+        for (T course : courses) {
+            System.out.println(course);
+        }
+    }
+
+    // Wildcard method to display
+    public static void displayAllCourses(List<? extends CourseType> courseList) {
+        System.out.println("All Courses:");
+        for (CourseType course : courseList) {
+            System.out.println(course);
+        }
+    }
+}
+// Main class
+public class UniversityCourseManagementSystem{
+    public static void main(String[] args) {
+        // Creating course categories
+        Course<ExamCourse> examCourseList = new Course<>();
+        Course<AssignmentCourse> assignmentCourseList = new Course<>();
+        Course<ResearchCourse> researchCourseList = new Course<>();
+
+        // Adding courses
+        ExamCourse examCourse1 = new ExamCourse("Data Structures", "Prof. Rajiv Kushwaha");
+        AssignmentCourse assignmentCourse1 = new AssignmentCourse("Software Engineering", "Prof. Sam Karan Pandey");
+        ResearchCourse researchCourse1 = new ResearchCourse("ML Research", "Dr. Karan Kumar");
+
+        examCourseList.addCourse(examCourse1);
+        assignmentCourseList.addCourse(assignmentCourse1);
+        researchCourseList.addCourse(researchCourse1);
+
+        // Display courses by category
+        examCourseList.displayCourses();
+        assignmentCourseList.displayCourses();
+        researchCourseList.displayCourses();
+
+        // Using wildcard to display all courses dynamically
+        List<CourseType> allCourses = new ArrayList<>();
+        allCourses.add(examCourse1);
+        allCourses.add(assignmentCourse1);
+        allCourses.add(researchCourse1);
+
+        Course.displayAllCourses(allCourses);
+    }
+}
Index: src/DAY01-Generics/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/.idea/vcs.xml b/src/DAY01-Generics/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739424475154)
+++ b/src/DAY01-Generics/.idea/vcs.xml	(date 1739424475154)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Junit/src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/src/main/java/org/example/Main.java b/src/DAY05-Regex&Junit/Junit/src/main/java/org/example/Main.java
new file mode 100644
--- /dev/null	(date 1739603801166)
+++ b/src/DAY05-Regex&Junit/Junit/src/main/java/org/example/Main.java	(date 1739603801166)
@@ -0,0 +1,17 @@
+package org.example;
+
+//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
+// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
+public class Main {
+    public static void main(String[] args) {
+        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
+        // to see how IntelliJ IDEA suggests fixing it.
+        System.out.printf("Hello and welcome!");
+
+        for (int i = 1; i <= 5; i++) {
+            //TIP Press <shortcut actionId="Debug"/> to start debugging your code. We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
+            // for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.
+            System.out.println("i = " + i);
+        }
+    }
+}
\ No newline at end of file
Index: src/DAY01-Generics/src/main/java/com/dynamiconlinemarketplace/Marketplace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/dynamiconlinemarketplace/Marketplace.java b/src/DAY01-Generics/src/main/java/com/dynamiconlinemarketplace/Marketplace.java
new file mode 100644
--- /dev/null	(date 1739424769983)
+++ b/src/DAY01-Generics/src/main/java/com/dynamiconlinemarketplace/Marketplace.java	(date 1739424769983)
@@ -0,0 +1,103 @@
+/*
+Dynamic Online Marketplace
+Concepts: Type Parameters, Generic Methods, Bounded Type Parameters
+Problem Statement:
+Build a generic product catalog for an online marketplace that supports various product types like Books, Clothing, and Gadgets. Each product type has a specific price range and category.
+Hints:
+Define a generic class Product<T> where T is restricted to a category (BookCategory, ClothingCategory, etc.).
+Implement a generic method to apply discounts dynamically (<T extends Product> void applyDiscount(T product, double percentage)).
+Ensure type safety while allowing multiple product categories to exist in the same catalog.
+*/
+package com.dynamiconlinemarketplace;
+import java.util.ArrayList;
+import java.util.List;
+abstract class Product {
+    private String name;
+    private double price;
+
+    public Product(String name, double price) {
+        this.name = name;
+        this.price = price;
+    }
+
+    public String getName() { return name; }
+    public double getPrice() { return price; }
+    public void setPrice(double price) { this.price = price; }
+
+    @Override
+    public String toString() {
+        return name + " - $" + price;
+    }
+}
+class Book extends Product {
+    public Book(String name, double price) {
+        super(name, price);
+    }
+}
+
+class Clothing extends Product {
+    public Clothing(String name, double price) {
+        super(name, price);
+    }
+}
+
+class Gadget extends Product {
+    public Gadget(String name, double price) {
+        super(name, price);
+    }
+}
+// Generic class
+class ProductCatalog<T extends Product> {
+    private List<T> products = new ArrayList<>();
+
+    public void addProduct(T product) {
+        products.add(product);
+    }
+
+    public void displayCatalog() {
+        System.out.println("Product Catalog:");
+        for (T product : products) {
+            System.out.println(product);
+        }
+    }
+    // Generic method for discount
+    public static <T extends Product> void applyDiscount(T product, double percentage) {
+        double discountedPrice = product.getPrice() - (product.getPrice() * (percentage / 100));
+        product.setPrice(discountedPrice);
+        System.out.println("Discount applied! New price of " + product.getName() + ": $" + discountedPrice);
+    }
+}
+// Main class to test functionality
+public class Marketplace {
+    public static void main(String[] args) {
+        // Creating catalogs for different product types
+        ProductCatalog<Book> bookCatalog = new ProductCatalog<>();
+        ProductCatalog<Clothing> clothingCatalog = new ProductCatalog<>();
+        ProductCatalog<Gadget> gadgetCatalog = new ProductCatalog<>();
+
+        // Adding products
+        Book book1 = new Book("Java Programming", 50);
+        Clothing cloth1 = new Clothing("T-Shirt", 20);
+        Gadget gadget1 = new Gadget("Smart Watch", 150);
+
+        bookCatalog.addProduct(book1);
+        clothingCatalog.addProduct(cloth1);
+        gadgetCatalog.addProduct(gadget1);
+
+        // Displaying catalogs
+        bookCatalog.displayCatalog();
+        clothingCatalog.displayCatalog();
+        gadgetCatalog.displayCatalog();
+
+        // Applying discount
+        ProductCatalog.applyDiscount(book1, 10);
+        ProductCatalog.applyDiscount(cloth1, 20);
+        ProductCatalog.applyDiscount(gadget1, 15);
+
+        // Display catalogs after discount
+        System.out.println("\nCatalogs after applying discounts:");
+        bookCatalog.displayCatalog();
+        clothingCatalog.displayCatalog();
+        gadgetCatalog.displayCatalog();
+    }
+}
\ No newline at end of file
Index: src/DAY01-Generics/src/main/java/com/aidrivenresumescreeningsystem/ResumeScreeningSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/aidrivenresumescreeningsystem/ResumeScreeningSystem.java b/src/DAY01-Generics/src/main/java/com/aidrivenresumescreeningsystem/ResumeScreeningSystem.java
new file mode 100644
--- /dev/null	(date 1739252961220)
+++ b/src/DAY01-Generics/src/main/java/com/aidrivenresumescreeningsystem/ResumeScreeningSystem.java	(date 1739252961220)
@@ -0,0 +1,110 @@
+/*
+AI-Driven Resume Screening System
+Concepts: Generic Classes, Generic Methods, Bounded Type Parameters, Wildcards
+Problem Statement:
+Develop an AI-Driven Resume Screening System that can process resumes for different job roles like Software Engineer, Data Scientist, and Product Manager while ensuring type safety.
+Hints:
+Create an abstract class JobRole (SoftwareEngineer, DataScientist, ProductManager).
+Implement a generic class Resume<T extends JobRole> to process resumes dynamically.
+Use a wildcard method (List<? extends JobRole>) to handle multiple job roles in the screening pipeline.
+*/
+
+package com.aidrivenresumescreeningsystem;
+
+import java.util.*;
+abstract class JobRole {
+    private String candidateName;
+
+    public JobRole(String candidateName) {
+        this.candidateName = candidateName;
+    }
+    public String getCandidateName() {
+        return candidateName;
+    }
+    public abstract String getRoleDescription();
+}
+// Concrete job roles
+class SoftwareEngineer extends JobRole {
+    public SoftwareEngineer(String candidateName) {
+        super(candidateName);
+    }
+    @Override
+    public String getRoleDescription() {
+        return "Software Engineer Role: Requires programming skills, algorithms, and system design.";
+    }
+}
+class DataScientist extends JobRole {
+    public DataScientist(String candidateName) {
+        super(candidateName);
+    }
+    @Override
+    public String getRoleDescription() {
+        return "Data Scientist Role: Requires machine learning, data analysis, and statistical modeling.";
+    }
+}
+class ProductManager extends JobRole {
+    public ProductManager(String candidateName) {
+        super(candidateName);
+    }
+    @Override
+    public String getRoleDescription() {
+        return "Product Manager Role: Requires business acumen, strategic thinking, and stakeholder management.";
+    }
+}
+// Generic class
+class Resume<T extends JobRole> {
+    private T candidate;
+
+    public Resume(T candidate) {
+        this.candidate = candidate;
+    }
+
+    public void displayResumeDetails() {
+        System.out.println("Candidate: " + candidate.getCandidateName());
+        System.out.println(candidate.getRoleDescription());
+    }
+}
+
+// Utility claas
+class ResumeScreeningUtility {
+    private ResumeScreeningUtility() {} // Private constructor to prevent instantiation
+
+    // Generic method for screening resumes
+    public static <T extends JobRole> void screenResume(Resume<T> resume) {
+        System.out.println("Screening Resume...");
+        resume.displayResumeDetails();
+        System.out.println("Resume passed initial screening.\n");
+    }
+
+    // Wildcard method used
+    public static void processMultipleResumes(List<? extends JobRole> resumes) {
+        System.out.println("Processing multiple resumes...");
+        for (JobRole role : resumes) {
+            System.out.println("Candidate: " + role.getCandidateName());
+            System.out.println(role.getRoleDescription());
+        }
+    }
+}
+// Main class
+public class ResumeScreeningSystem {
+    public static void main(String[] args) {
+        // Creating resumes for different job roles
+        Resume<SoftwareEngineer> seResume = new Resume<>(new SoftwareEngineer("Alice"));
+        Resume<DataScientist> dsResume = new Resume<>(new DataScientist("Bob"));
+        Resume<ProductManager> pmResume = new Resume<>(new ProductManager("Charlie"));
+
+        // Screening individual resumes
+        ResumeScreeningUtility.screenResume(seResume);
+        ResumeScreeningUtility.screenResume(dsResume);
+        ResumeScreeningUtility.screenResume(pmResume);
+
+        // Processing multiple resumes using wildcards
+        List<JobRole> jobRoles = Arrays.asList(
+                new SoftwareEngineer("David"),
+                new DataScientist("Emma"),
+                new ProductManager("Frank")
+        );
+
+        ResumeScreeningUtility.processMultipleResumes(jobRoles);
+    }
+}
Index: src/DAY01-Generics/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/.gitignore b/src/DAY01-Generics/.gitignore
new file mode 100644
--- /dev/null	(date 1739424426122)
+++ b/src/DAY01-Generics/.gitignore	(date 1739424426122)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/DAY01-Generics/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/.idea/encodings.xml b/src/DAY01-Generics/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739424475143)
+++ b/src/DAY01-Generics/.idea/encodings.xml	(date 1739424475143)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY01-Generics/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/.idea/.gitignore b/src/DAY01-Generics/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739424435205)
+++ b/src/DAY01-Generics/.idea/.gitignore	(date 1739424435205)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY01-Generics/src/main/java/com/Generics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/Generics.java b/src/DAY01-Generics/src/main/java/com/Generics.java
new file mode 100644
--- /dev/null	(date 1739251192528)
+++ b/src/DAY01-Generics/src/main/java/com/Generics.java	(date 1739251192528)
@@ -0,0 +1,17 @@
+package com;
+
+import java.util.ArrayList;
+
+public class Generics {
+    public static void main(String[] args){
+        int[] arr = new int[5];
+        ArrayList list = new ArrayList();
+        list.add(5);
+        list.add("Hello");
+        list.add(8.18);
+
+//        String o = (String) list.get(1);
+//        //we face type safety , No compile time checking and manual casting
+//        String integer = (String) list.get(0);  // This will give ClassCastException:-In Java occurs when you try to cast an object to a class of which it is not an instance.
+    }
+}
Index: src/DAY01-Generics/src/main/java/com/smartwarehousemanagementsystem/SmartWarehouseSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/smartwarehousemanagementsystem/SmartWarehouseSystem.java b/src/DAY01-Generics/src/main/java/com/smartwarehousemanagementsystem/SmartWarehouseSystem.java
new file mode 100644
--- /dev/null	(date 1739424704482)
+++ b/src/DAY01-Generics/src/main/java/com/smartwarehousemanagementsystem/SmartWarehouseSystem.java	(date 1739424704482)
@@ -0,0 +1,137 @@
+/*
+Smart Warehouse Management System
+Concepts: Generic Classes, Bounded Type Parameters, Wildcards
+Problem Statement:
+You are developing a Smart Warehouse System that manages different types of items like Electronics, Groceries, and Furniture. The system should be able to store and retrieve items dynamically while maintaining type safety.
+Hints:
+Create an abstract class WarehouseItem that all items extend (Electronics, Groceries, Furniture).
+Implement a generic class Storage<T extends WarehouseItem> to store items safely.
+Implement a wildcard method to display all items in storage regardless of their type (List<? extends WarehouseItem>).
+
+*/
+
+package com.smartwarehousemanagementsystem;
+
+// Generic Storage class
+import java.util.ArrayList;
+import java.util.List;
+
+// Abstract class representing a warehouse item
+abstract class WarehouseItem {
+    private String name;
+    private double price;
+
+    public WarehouseItem(String name, double price) {
+        this.name = name;
+        this.price = price;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public double getPrice() {
+        return price;
+    }
+
+    public void setPrice(double price) {
+        this.price = price;
+    }
+
+    // Abstract method to display the details of the item.
+    public abstract void display();
+}
+
+// Concrete warehouse item types
+class Electronics extends WarehouseItem {
+    public Electronics(String name, double price) {
+        super(name, price);
+    }
+
+    @Override
+    public void display() {
+        System.out.println("Electronics Item: " + getName() + " | Price: $" + getPrice());
+    }
+}
+
+class Groceries extends WarehouseItem {
+    public Groceries(String name, double price) {
+        super(name, price);
+    }
+
+    @Override
+    public void display() {
+        System.out.println("Grocery Item: " + getName() + " | Price: $" + getPrice());
+    }
+}
+
+class Furniture extends WarehouseItem {
+    public Furniture(String name, double price) {
+        super(name, price);
+    }
+
+    @Override
+    public void display() {
+        System.out.println("Furniture Item: " + getName() + " | Price: $" + getPrice());
+    }
+}
+
+// Generic Storage class to hold different item types
+class Storage<T extends WarehouseItem> {
+    private List<T> items = new ArrayList<>();
+
+    public void addItem(T item) {
+        items.add(item);
+    }
+
+    public void removeItem(T item) {
+        items.remove(item);
+    }
+
+    public List<T> getItems() {
+        return items;
+    }
+}
+
+// Utility class to display items in storage
+class WarehouseUtils {
+    public static void displayItems(List<? extends WarehouseItem> items) {
+        for (WarehouseItem item : items) {
+            item.display(); // Calling the display() method of each item
+        }
+    }
+}
+
+// Main class to test the Smart Warehouse Management System
+public class SmartWarehouseSystem {
+    public static void main(String[] args) {
+        // Create storage for different item types
+        Storage<Electronics> electronicsStorage = new Storage<>();
+        Storage<Groceries> groceriesStorage = new Storage<>();
+        Storage<Furniture> furnitureStorage = new Storage<>();
+
+        // Add items to storage
+        electronicsStorage.addItem(new Electronics("Laptop", 1500.0));
+        electronicsStorage.addItem(new Electronics("Smartphone", 800.0));
+
+        groceriesStorage.addItem(new Groceries("Apple", 2.0));
+        groceriesStorage.addItem(new Groceries("Milk", 3.5));
+
+        furnitureStorage.addItem(new Furniture("Chair", 100.0));
+        furnitureStorage.addItem(new Furniture("Table", 250.0));
+
+        // Display items
+        System.out.println("Electronics Storage:");
+        WarehouseUtils.displayItems(electronicsStorage.getItems());
+
+        System.out.println("\nGroceries Storage:");
+        WarehouseUtils.displayItems(groceriesStorage.getItems());
+
+        System.out.println("\nFurniture Storage:");
+        WarehouseUtils.displayItems(furnitureStorage.getItems());
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1739162236797)
+++ b/.gitignore	(date 1739162236797)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: Week-4.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Week-4.iml b/Week-4.iml
new file mode 100644
--- /dev/null	(date 1739258048357)
+++ b/Week-4.iml	(date 1739258048357)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Junit/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/.gitignore b/src/DAY05-Regex&Junit/Junit/.gitignore
new file mode 100644
--- /dev/null	(date 1739603801158)
+++ b/src/DAY05-Regex&Junit/Junit/.gitignore	(date 1739603801158)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1739162242875)
+++ b/.idea/modules.xml	(date 1739162242875)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Week-4.iml" filepath="$PROJECT_DIR$/Week-4.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/.gitignore b/src/DAY03-JavaStreams/.gitignore
new file mode 100644
--- /dev/null	(date 1739439811566)
+++ b/src/DAY03-JavaStreams/.gitignore	(date 1739439811566)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739162242879)
+++ b/.idea/misc.xml	(date 1739162242879)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY01-Generics/src/main/java/com/personalizedmealplangenerator/MealPlanSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY01-Generics/src/main/java/com/personalizedmealplangenerator/MealPlanSystem.java b/src/DAY01-Generics/src/main/java/com/personalizedmealplangenerator/MealPlanSystem.java
new file mode 100644
--- /dev/null	(date 1739424704460)
+++ b/src/DAY01-Generics/src/main/java/com/personalizedmealplangenerator/MealPlanSystem.java	(date 1739424704460)
@@ -0,0 +1,92 @@
+/*
+Personalized Meal Plan Generator
+Concepts: Generic Methods, Type Parameters, Bounded Type Parameters
+Problem Statement:
+Design a Personalized Meal Plan Generator where users can choose different meal categories like Vegetarian, Vegan, Keto, or High-Protein. The system should ensure only valid meal plans are generated.
+Hints:
+Define an interface MealPlan with subtypes (VegetarianMeal, VeganMeal, etc.).
+Implement a generic class Meal<T extends MealPlan> to handle different meal plans.
+Use a generic method to validate and generate a personalized meal plan dynamically.
+*/
+
+package com.personalizedmealplangenerator;
+
+interface MealPlan {
+    String getMealDetails();
+}
+class VegetarianMeal implements MealPlan {
+    @Override
+    public String getMealDetails() {
+        return "Vegetarian Meal: Includes vegetables, grains, and dairy.";
+    }
+}
+class VeganMeal implements MealPlan {
+    @Override
+    public String getMealDetails() {
+        return "Vegan Meal: Includes plant-based foods only, no animal products.";
+    }
+}
+class KetoMeal implements MealPlan {
+    @Override
+    public String getMealDetails() {
+        return "Keto Meal: Low-carb, high-fat diet with proteins and healthy fats.";
+    }
+}
+class HighProteinMeal implements MealPlan {
+    @Override
+    public String getMealDetails() {
+        return "High-Protein Meal: Rich in lean meats, eggs, and legumes.";
+    }
+}
+// Generic class
+class Meal<T extends MealPlan> {
+    private T meal;
+
+    public Meal(T meal) {
+        this.meal = meal;
+    }
+    public void displayMeal() {
+        System.out.println(meal.getMealDetails());
+    }
+}
+// Utility
+class MealPlanGenerator {
+    // Private constructor to prevent instantiation
+    private MealPlanGenerator() {}
+
+    public static <T extends MealPlan> Meal<T> generateMealPlan(T meal) {
+        System.out.println("Generating meal plan...");
+        return new Meal<>(meal);
+    }
+}
+// Utility class for additional helper methods
+class MealPlanUtils {
+    // Private constructor to prevent instantiation
+    private MealPlanUtils() {}
+
+    public static void listAvailableMealPlans() {
+        System.out.println("Available Meal Plans:");
+        System.out.println("1. Vegetarian Meal");
+        System.out.println("2. Vegan Meal");
+        System.out.println("3. Keto Meal");
+        System.out.println("4. High-Protein Meal");
+    }
+}
+public class MealPlanSystem {
+    public static void main(String[] args) {
+        // Display available meal plans
+        MealPlanUtils.listAvailableMealPlans();
+
+        // Generate different meal plans dynamically
+        Meal<VegetarianMeal> vegetarianMeal = MealPlanGenerator.generateMealPlan(new VegetarianMeal());
+        Meal<VeganMeal> veganMeal = MealPlanGenerator.generateMealPlan(new VeganMeal());
+        Meal<KetoMeal> ketoMeal = MealPlanGenerator.generateMealPlan(new KetoMeal());
+        Meal<HighProteinMeal> highProteinMeal = MealPlanGenerator.generateMealPlan(new HighProteinMeal());
+
+        // Display meal details
+        vegetarianMeal.displayMeal();
+        veganMeal.displayMeal();
+        ketoMeal.displayMeal();
+        highProteinMeal.displayMeal();
+    }
+}
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Regex/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/.idea/encodings.xml b/src/DAY05-Regex&Junit/Regex/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739603805569)
+++ b/src/DAY05-Regex&Junit/Regex/.idea/encodings.xml	(date 1739603805569)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739162247555)
+++ b/.idea/.gitignore	(date 1739162247555)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY05-Regex&Junit/Regex/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Regex/.idea/vcs.xml b/src/DAY05-Regex&Junit/Regex/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739603805582)
+++ b/src/DAY05-Regex&Junit/Regex/.idea/vcs.xml	(date 1739603805582)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/org/example/Main.java b/src/DAY03-JavaStreams/src/main/java/org/example/Main.java
new file mode 100644
--- /dev/null	(date 1739439811574)
+++ b/src/DAY03-JavaStreams/src/main/java/org/example/Main.java	(date 1739439811574)
@@ -0,0 +1,17 @@
+package org.example;
+
+//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
+// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
+public class Main {
+    public static void main(String[] args) {
+        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
+        // to see how IntelliJ IDEA suggests fixing it.
+        System.out.printf("Hello and welcome!");
+
+        for (int i = 1; i <= 5; i++) {
+            //TIP Press <shortcut actionId="Debug"/> to start debugging your code. We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
+            // for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.
+            System.out.println("i = " + i);
+        }
+    }
+}
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Junit/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/pom.xml b/src/DAY05-Regex&Junit/Junit/pom.xml
new file mode 100644
--- /dev/null	(date 1739605174715)
+++ b/src/DAY05-Regex&Junit/Junit/pom.xml	(date 1739605174715)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>Junit</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+    <dependencies>
+        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.11.4</version>
+            <scope>test</scope>
+        </dependency>
+
+    </dependencies>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/pom.xml b/src/DAY03-JavaStreams/pom.xml
new file mode 100644
--- /dev/null	(date 1739439832100)
+++ b/src/DAY03-JavaStreams/pom.xml	(date 1739439832100)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>DAY03-JavaStreams</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/.idea/.gitignore b/src/DAY03-JavaStreams/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739439821380)
+++ b/src/DAY03-JavaStreams/.idea/.gitignore	(date 1739439821380)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY05-Regex&Junit/Junit/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/.idea/.gitignore b/src/DAY05-Regex&Junit/Junit/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739603811723)
+++ b/src/DAY05-Regex&Junit/Junit/.idea/.gitignore	(date 1739603811723)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY03-JavaStreams/src/main/java/com/c.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/c.java b/src/DAY03-JavaStreams/src/main/java/com/c.java
new file mode 100644
--- /dev/null	(date 1739440097912)
+++ b/src/DAY03-JavaStreams/src/main/java/com/c.java	(date 1739440097912)
@@ -0,0 +1,4 @@
+package com;
+
+public class c {
+}
Index: src/DAY05-Regex&Junit/Junit/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/.idea/misc.xml b/src/DAY05-Regex&Junit/Junit/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739603906771)
+++ b/src/DAY05-Regex&Junit/Junit/.idea/misc.xml	(date 1739603906771)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY03-JavaStreams/src/main/java/com/wordscount/WordFrequencyCounter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY03-JavaStreams/src/main/java/com/wordscount/WordFrequencyCounter.java b/src/DAY03-JavaStreams/src/main/java/com/wordscount/WordFrequencyCounter.java
new file mode 100644
--- /dev/null	(date 1739440851817)
+++ b/src/DAY03-JavaStreams/src/main/java/com/wordscount/WordFrequencyCounter.java	(date 1739440851817)
@@ -0,0 +1,58 @@
+/*
+Count Words in a File
+📌 Problem Statement:
+Write a Java program that counts the number of words in a given text file and displays the top 5 most frequently occurring words.
+Requirements:
+Use FileReader and BufferedReader to read the file.
+Use a HashMap<String, Integer> to count word occurrences.
+Sort the words based on frequency and display the top 5.
+*/
+
+package com.wordscount;
+import java.io.*;
+import java.util.*;
+
+public class WordFrequencyCounter {
+    public static void main(String[] args) {
+        String filePath = "M:\\CapgeminiTraining\\Week-4\\src\\DAY03-JavaStreams\\src\\main\\resources\\SampleFile.txt"; // Specify the text file path
+
+        // HashMap to store word counts
+        Map<String, Integer> wordCountMap = new HashMap<>();
+
+        // Read the file and count word occurrences
+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
+            String line;
+
+            while ((line = reader.readLine()) != null) {
+                // Split line into words using regex (ignoring punctuation)
+                String[] words = line.toLowerCase().split("\\W+");
+
+                for (String word : words) {
+                    if (!word.isEmpty()) { // Ignore empty strings
+                        wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
+                    }
+                }
+            }
+        } catch (IOException e) {
+            System.err.println("Error reading file: " + e.getMessage());
+            return;
+        }
+
+        // Sort words by frequency in descending order
+        List<Map.Entry<String, Integer>> sortedWords = new ArrayList<>(wordCountMap.entrySet());
+        sortedWords.sort((a, b) -> b.getValue().compareTo(a.getValue())); // Sort by frequency
+
+        // Display the total word count
+        int totalWords = wordCountMap.values().stream().mapToInt(Integer::intValue).sum();
+        System.out.println("Total words in file: " + totalWords);
+
+        // Display the top 5 most frequent words
+        System.out.println("\nTop 5 most frequently occurring words:");
+        int count = 0;
+        for (Map.Entry<String, Integer> entry : sortedWords) {
+            System.out.println(entry.getKey() + " -> " + entry.getValue() + " times");
+            if (++count == 5) break; // Stop after top 5 words
+        }
+    }
+}
+
Index: src/DAY05-Regex&Junit/Junit/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/.idea/encodings.xml b/src/DAY05-Regex&Junit/Junit/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739603906775)
+++ b/src/DAY05-Regex&Junit/Junit/.idea/encodings.xml	(date 1739603906775)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY05-Regex&Junit/Junit/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY05-Regex&Junit/Junit/.idea/vcs.xml b/src/DAY05-Regex&Junit/Junit/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1739603906787)
+++ b/src/DAY05-Regex&Junit/Junit/.idea/vcs.xml	(date 1739603906787)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: DAY02-CollectionsFramework/listinterface/c.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DAY02-CollectionsFramework/listinterface/c.java b/DAY02-CollectionsFramework/listinterface/c.java
new file mode 100644
--- /dev/null	(date 1739267278798)
+++ b/DAY02-CollectionsFramework/listinterface/c.java	(date 1739267278798)
@@ -0,0 +1,4 @@
+package com.listinterface;
+
+public class c {
+}
Index: src/DAY02-CollectionsFramework/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/pom.xml b/src/DAY02-CollectionsFramework/pom.xml
new file mode 100644
--- /dev/null	(date 1739258487326)
+++ b/src/DAY02-CollectionsFramework/pom.xml	(date 1739258487326)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>DAY02-CollectionFramework</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <dependencies>
+        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.11.4</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>5.11.4</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params -->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-params</artifactId>
+            <version>5.11.4</version>
+            <scope>test</scope>
+        </dependency>
+
+
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/mergetwomaps/MergeTwoMaps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/mergetwomaps/MergeTwoMaps.java b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/mergetwomaps/MergeTwoMaps.java
new file mode 100644
--- /dev/null	(date 1739353975310)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/mergetwomaps/MergeTwoMaps.java	(date 1739353975310)
@@ -0,0 +1,38 @@
+/*
+Merge Two Maps
+Merge two maps such that if a key exists in both, sum their values.
+Example:
+Map1: {A=1, B=2}, Map2: {B=3, C=4} → Output: {A=1, B=5, C=4}.
+*/
+
+package com.mapinterface.mergetwomaps;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class MergeTwoMaps {
+
+    public static void main(String[] args) {
+
+        Map<String, Integer> map1 = new HashMap<>();
+        map1.put("A", 1);
+        map1.put("B", 2);
+
+
+        Map<String, Integer> map2 = new HashMap<>();
+        map2.put("B", 3);
+        map2.put("C", 4);
+
+
+        Map<String, Integer> mergedMap = new HashMap<>(map1);
+
+
+        for (Map.Entry<String, Integer> entry : map2.entrySet()) {
+            mergedMap.merge(entry.getKey(), entry.getValue(), Integer::sum);
+        }
+
+        // Output the merged map
+        System.out.println(mergedMap);
+    }
+}
+
Index: src/DAY02-CollectionsFramework/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/.idea/misc.xml b/src/DAY02-CollectionsFramework/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1739258348117)
+++ b/src/DAY02-CollectionsFramework/.idea/misc.xml	(date 1739258348117)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/.idea/.gitignore b/src/DAY02-CollectionsFramework/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1739258353414)
+++ b/src/DAY02-CollectionsFramework/.idea/.gitignore	(date 1739258353414)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/symmetricdifference/SymmetricDifference.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/symmetricdifference/SymmetricDifference.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/symmetricdifference/SymmetricDifference.java
new file mode 100644
--- /dev/null	(date 1739339998367)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/symmetricdifference/SymmetricDifference.java	(date 1739339998367)
@@ -0,0 +1,40 @@
+/*
+Symmetric Difference
+Find the symmetric difference (elements present in either set but not in both) of two sets.
+Example:
+Set1: {1, 2, 3}, Set2: {3, 4, 5} → Output: {1, 2, 4, 5}.
+*/
+
+package com.setinterface.symmetricdifference;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class SymmetricDifference {
+    public static <T> Set<T> getSymmetricDifference(Set<T> set1, Set<T> set2) {
+        Set<T> union = new HashSet<>(set1);
+        union.addAll(set2); // Union of both sets
+
+        Set<T> intersection = new HashSet<>(set1);
+        intersection.retainAll(set2); // Intersection of both sets
+
+        union.removeAll(intersection); // Remove common elements
+        return union;
+    }
+
+    public static void main(String[] args) {
+        Set<Integer> set1 = new HashSet<>();
+        Set<Integer> set2 = new HashSet<>();
+
+        set1.add(1);
+        set1.add(2);
+        set1.add(3);
+
+        set2.add(3);
+        set2.add(4);
+        set2.add(5);
+
+        System.out.println("Symmetric Difference: " + getSymmetricDifference(set1, set2));
+    }
+}
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/c.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/c.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/c.java
new file mode 100644
--- /dev/null	(date 1739267278798)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/c.java	(date 1739267278798)
@@ -0,0 +1,4 @@
+package com.listinterface;
+
+public class c {
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/circularbuffersimulation/CircularBufferSimulation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/circularbuffersimulation/CircularBufferSimulation.java b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/circularbuffersimulation/CircularBufferSimulation.java
new file mode 100644
--- /dev/null	(date 1739347405287)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/circularbuffersimulation/CircularBufferSimulation.java	(date 1739347405287)
@@ -0,0 +1,113 @@
+/*
+Circular Buffer Simulation
+Implement a circular buffer (fixed-size queue) using an array-based queue. When full, overwrite the oldest element.
+Example:
+Buffer size=3: Insert 1, 2, 3 → Insert 4 → Buffer: [2, 3, 4].
+*/
+
+package com.queueinterface.circularbuffersimulation;
+
+class CircularBuffer<T> {
+    private T[] buffer;
+    private int size;
+    private int front;
+    private int rear;
+    private int count;
+
+    public CircularBuffer(int size) {
+        this.size = size;
+        this.buffer = (T[]) new Object[size];
+        this.front = 0;
+        this.rear = 0;
+        this.count = 0;
+    }
+
+    // Insert element to the buffer
+    public void insert(T element) {
+        if (count == size) {
+            // Buffer is full, overwrite the oldest element
+            front = (front + 1) % size;  // Move front to the next element
+        } else {
+            count++;
+        }
+        buffer[rear] = element;
+        rear = (rear + 1) % size;  // Move rear to the next position
+    }
+
+    // Remove and return the front element
+    public T remove() {
+        if (count == 0) {
+            throw new IllegalStateException("Buffer is empty");
+        }
+        T removedElement = buffer[front];
+        front = (front + 1) % size;  // Move front to the next position
+        count--;
+        return removedElement;
+    }
+
+    // Get the element at the front without removing it
+    public T peek() {
+        if (count == 0) {
+            throw new IllegalStateException("Buffer is empty");
+        }
+        return buffer[front];
+    }
+
+    // Check if the buffer is empty
+    public boolean isEmpty() {
+        return count == 0;
+    }
+
+    // Check if the buffer is full
+    public boolean isFull() {
+        return count == size;
+    }
+
+    // Display buffer contents (for debugging)
+    public void display() {
+        if (count == 0) {
+            System.out.println("Buffer is empty");
+            return;
+        }
+        System.out.print("Buffer: [");
+        for (int i = 0; i < count; i++) {
+            System.out.print(buffer[(front + i) % size]);
+            if (i != count - 1) {
+                System.out.print(", ");
+            }
+        }
+        System.out.println("]");
+    }
+}
+
+public class CircularBufferSimulation {
+    public static void main(String[] args) {
+        // Create a circular buffer with size 3
+        CircularBuffer<Integer> buffer = new CircularBuffer<>(3);
+
+        // Insert elements
+        buffer.insert(1);
+        buffer.insert(2);
+        buffer.insert(3);
+        buffer.display(); // Buffer: [1, 2, 3]
+
+        // Insert another element, which will overwrite the oldest element
+        buffer.insert(4);
+        buffer.display(); // Buffer: [2, 3, 4]
+
+        // Remove an element
+        System.out.println("Removed: " + buffer.remove()); // Removed: 2
+        buffer.display(); // Buffer: [3, 4]
+
+        // Peek the front element
+        System.out.println("Front element: " + buffer.peek()); // Front element: 3
+
+        // Insert another element
+        buffer.insert(5);
+        buffer.display(); // Buffer: [3, 4, 5]
+
+        // Remove and display the buffer
+        System.out.println("Removed: " + buffer.remove()); // Removed: 3
+        buffer.display(); // Buffer: [4, 5]
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystem/InsurancePolicyManagementSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystem/InsurancePolicyManagementSystem.java b/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystem/InsurancePolicyManagementSystem.java
new file mode 100644
--- /dev/null	(date 1739423473556)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/insurancepolicymanagementsystem/InsurancePolicyManagementSystem.java	(date 1739423473556)
@@ -0,0 +1,194 @@
+/*
+Insurance Policy Management System
+
+Each policy has the following attributes:
+● Policy Number (unique identifier)
+● Policyholder Name
+● Expiry Date
+● Coverage Type (e.g., Health, Auto, Home)
+● Premium Amount
+
+Requirements:
+1. Store Unique Policies: Implement methods to store policies using different
+types of sets (HashSet, LinkedHashSet, TreeSet), each serving different
+purposes:
+ HashSet for quick lookups.
+ LinkedHashSet to maintain the order of insertion.
+ TreeSet to maintain policies sorted by expiry date.
+
+2. Retrieve Policies: Implement methods to retrieve and display policies based on
+certain criteria:
+ All unique policies.
+ Policies expiring soon (within the next 30 days)
+ Policies with a specific coverage type.
+ Duplicate policies based on policy numbers.
+
+3. Performance Comparison: Compare the performance of HashSet,
+LinkedHashSet, and TreeSet in terms of adding, removing, and searching for
+Policies.
+*/
+
+package com.insurancepolicymanagementsystem;
+
+import java.util.*;
+import java.text.*;
+
+class Policy {
+    private String policyNumber;
+    private String policyholderName;
+    private Date expiryDate;
+    private String coverageType;
+    private double premiumAmount;
+
+    public Policy(String policyNumber, String policyholderName, Date expiryDate, String coverageType, double premiumAmount) {
+        this.policyNumber = policyNumber;
+        this.policyholderName = policyholderName;
+        this.expiryDate = expiryDate;
+        this.coverageType = coverageType;
+        this.premiumAmount = premiumAmount;
+    }
+
+    public String getPolicyNumber() {
+        return policyNumber;
+    }
+
+    public Date getExpiryDate() {
+        return expiryDate;
+    }
+
+    public String getCoverageType() {
+        return coverageType;
+    }
+
+    @Override
+    public String toString() {
+        return "Policy Number: " + policyNumber + ", Holder: " + policyholderName +
+                ", Expiry: " + expiryDate + ", Coverage: " + coverageType + ", Premium: " + premiumAmount;
+    }
+
+    //Equals and hashcode based on policyNumber for HashSet functionality
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Policy policy = (Policy) o;
+        return policyNumber.equals(policy.policyNumber);
+    }
+
+    @Override
+    public int hashCode() {
+        return policyNumber.hashCode();
+    }
+}
+
+
+class InsurancePolicyManager {
+    private Set<Policy> hashSetPolicies = new HashSet<>();
+    private Set<Policy> linkedHashSetPolicies = new LinkedHashSet<>();
+    private Set<Policy> treeSetPolicies = new TreeSet<>(Comparator.comparing(Policy::getExpiryDate));
+
+    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
+
+    //Method to add a policy to all sets
+    public void addPolicy(Policy policy) {
+        hashSetPolicies.add(policy);
+        linkedHashSetPolicies.add(policy);
+        treeSetPolicies.add(policy);
+    }
+
+    //Method to get all unique policies
+    public void displayAllPolicies() {
+        System.out.println("All Unique Policies:");
+        hashSetPolicies.forEach(System.out::println);
+    }
+
+    //Method to get policies expiring soon (within the next 30 days)
+    public void displayPoliciesExpiringSoon() {
+        Date currentDate = new Date();
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(currentDate);
+        calendar.add(Calendar.DATE, 30);  // 30 days from now
+        Date dateAfter30Days = calendar.getTime();
+
+        System.out.println("\nPolicies Expiring Soon:");
+        for (Policy policy : hashSetPolicies) {
+            if (policy.getExpiryDate().before(dateAfter30Days)) {
+                System.out.println(policy);
+            }
+        }
+    }
+
+    //Method to get policies based on specific coverage type
+    public void displayPoliciesByCoverage(String coverageType) {
+        System.out.println("\nPolicies with Coverage Type: " + coverageType);
+        for (Policy policy : hashSetPolicies) {
+            if (policy.getCoverageType().equalsIgnoreCase(coverageType)) {
+                System.out.println(policy);
+            }
+        }
+    }
+
+    //Method to check for duplicate policies based on policy number
+    public void displayDuplicatePolicies() {
+        Set<String> uniquePolicyNumbers = new HashSet<>();
+        System.out.println("\nDuplicate Policies:");
+        for (Policy policy : hashSetPolicies) {
+            if (!uniquePolicyNumbers.add(policy.getPolicyNumber())) {
+                System.out.println(policy);
+            }
+        }
+    }
+
+    //Method for Performance comparison
+    public void comparePerformance() {
+        //Adding policies
+        long startTime = System.nanoTime();
+        addPolicy(new Policy("P1001", "Alice", new Date(System.currentTimeMillis() + 100000000L), "Health", 500));
+        long endTime = System.nanoTime();
+        System.out.println("\nAdd operation (HashSet): " + (endTime - startTime) + " ns");
+
+        //Removing policies
+        startTime = System.nanoTime();
+        hashSetPolicies.remove(new Policy("P1001", "Alice", new Date(), "Health", 500));
+        endTime = System.nanoTime();
+        System.out.println("Remove operation (HashSet): " + (endTime - startTime) + " ns");
+
+        //Searching for a policy
+        startTime = System.nanoTime();
+        hashSetPolicies.contains(new Policy("P1001", "Alice", new Date(), "Health", 500));
+        endTime = System.nanoTime();
+        System.out.println("Search operation (HashSet): " + (endTime - startTime) + " ns");
+    }
+}
+
+
+
+public class InsurancePolicyManagementSystem {
+    public static void main(String[] args) throws Exception {
+        //Creating the InsurancePolicyManager
+        InsurancePolicyManager manager = new InsurancePolicyManager();
+
+        //Creating some policies
+        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
+        Date expiry1 = dateFormat.parse("2025-03-01");
+        Date expiry2 = dateFormat.parse("2025-02-20");
+        Date expiry3 = dateFormat.parse("2025-05-10");
+
+        Policy policy1 = new Policy("P1001", "Alice", expiry1, "Health", 500);
+        Policy policy2 = new Policy("P1002", "Bob", expiry2, "Auto", 300);
+        Policy policy3 = new Policy("P1003", "Charlie", expiry3, "Home", 400);
+
+        //Adding policies to sets
+        manager.addPolicy(policy1);
+        manager.addPolicy(policy2);
+        manager.addPolicy(policy3);
+
+        manager.displayAllPolicies();
+        manager.displayPoliciesExpiringSoon();
+        manager.displayPoliciesByCoverage("Health");
+        manager.displayDuplicatePolicies();
+        manager.comparePerformance();
+    }
+}
+
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/convertasetintosortedlist/ConvertASetIntoSortedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/convertasetintosortedlist/ConvertASetIntoSortedList.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/convertasetintosortedlist/ConvertASetIntoSortedList.java
new file mode 100644
--- /dev/null	(date 1739340358059)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/convertasetintosortedlist/ConvertASetIntoSortedList.java	(date 1739340358059)
@@ -0,0 +1,24 @@
+/*
+Convert a Set to a Sorted List
+Convert a HashSet of integers into a sorted list in ascending order.
+Example:
+Input: {5, 3, 9, 1} → Output: [1, 3, 5, 9].
+*/
+
+package com.setinterface.convertasetintosortedlist;
+import java.util.*;
+
+
+public class ConvertASetIntoSortedList {
+    public static List<Integer> convertSetToSortedList(Set<Integer> set) {
+        List<Integer> sortedList = new ArrayList<>(set); // Convert Set to List
+        Collections.sort(sortedList); // Sort in ascending order
+        return sortedList;
+    }
+
+    public static void main(String[] args) {
+        Set<Integer> hashSet = new HashSet<>(Arrays.asList(5, 3, 9, 1));
+
+        System.out.println("Sorted List: " + convertSetToSortedList(hashSet));
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findnthelementfromtheend/FindNthFromTheEnd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findnthelementfromtheend/FindNthFromTheEnd.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findnthelementfromtheend/FindNthFromTheEnd.java
new file mode 100644
--- /dev/null	(date 1739338032502)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findnthelementfromtheend/FindNthFromTheEnd.java	(date 1739338032502)
@@ -0,0 +1,51 @@
+/*
+Find the Nth Element from the End
+Given a singly linked list (use LinkedList), find the Nth element from the end without calculating its size.
+Example:
+Input: [A, B, C, D, E], N=2 → Output: D.
+*/
+
+package com.listinterface.findnthelementfromtheend;
+import java.util.LinkedList;
+import java.util.ListIterator;
+
+public class FindNthFromTheEnd {
+    public static <T> T findNthFromEnd(LinkedList<T> list, int N) {
+        if (list == null || N <= 0) {
+            throw new IllegalArgumentException("Invalid input");
+        }
+
+        ListIterator<T> fast = list.listIterator();
+        ListIterator<T> slow = list.listIterator();
+
+        // Move fast pointer N steps ahead
+        for (int i = 0; i < N; i++) {
+            if (!fast.hasNext()) {
+                throw new IllegalArgumentException("N is larger than the size of the list");
+            }
+            fast.next();
+        }
+
+        // Move both pointers until fast reaches the end
+        while (fast.hasNext()) {
+            fast.next();
+            slow.next();
+        }
+
+        // slow now points to the Nth node from the end
+        return slow.next();
+    }
+
+    public static void main(String[] args) {
+        LinkedList<String> list = new LinkedList<>();
+        list.add("A");
+        list.add("B");
+        list.add("C");
+        list.add("D");
+        list.add("E");
+
+        int N = 2;
+        System.out.println("Nth element from the end: " + findNthFromEnd(list, N));
+    }
+}
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/twosetsareequal/CheckTwoSetsAreEqual.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/twosetsareequal/CheckTwoSetsAreEqual.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/twosetsareequal/CheckTwoSetsAreEqual.java
new file mode 100644
--- /dev/null	(date 1739339264316)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/twosetsareequal/CheckTwoSetsAreEqual.java	(date 1739339264316)
@@ -0,0 +1,35 @@
+/*
+Check if Two Sets Are Equal
+Compare two sets and determine if they contain the same elements, regardless of order.
+Example:
+Set1: {1, 2, 3}, Set2: {3, 2, 1} → Output: true.
+*/
+
+package com.setinterface.twosetsareequal;
+import java.util.HashSet;
+import java.util.Set;
+
+public class CheckTwoSetsAreEqual {
+
+    public static <T> boolean areSetEqual(Set<T> set1, Set<T> set2){
+        if(set1 == null || set2 == null) {
+            return false;
+        }
+        return set1.equals(set2);
+    }
+    public static void main(String[] args){
+        Set<Integer> set1 = new HashSet<>();
+        Set<Integer> set2 = new HashSet<>();
+
+        set1.add(1);
+        set1.add(2);
+        set1.add(3);
+
+        set2.add(3);
+        set2.add(2);
+        set2.add(1);
+
+
+        System.out.println("Are the sets equal:- " + areSetEqual(set1, set2));
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/reverselist/ReverseList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/reverselist/ReverseList.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/reverselist/ReverseList.java
new file mode 100644
--- /dev/null	(date 1739268506407)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/reverselist/ReverseList.java	(date 1739268506407)
@@ -0,0 +1,41 @@
+/*
+Write a program to reverse the elements of a given List without using built-in reverse methods. Implement it for both ArrayList and LinkedList.
+Example:
+Input: [1, 2, 3, 4, 5] → Output: [5, 4, 3, 2, 1].
+*/
+
+package com.listinterface.reverselist;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+public class ReverseList {
+
+    // Generic method to reverse any List (ArrayList or LinkedList)
+    public static <T> void reverseList(List<T> list) {
+        int size = list.size();
+        for (int i = 0; i < size / 2; i++) {
+            T temp = list.get(i);
+            list.set(i, list.get(size - i - 1));
+            list.set(size - i - 1, temp);
+        }
+    }
+
+    public static void main(String[] args) {
+
+        // ArrayList
+        ArrayList<Integer> arrayList = new ArrayList<>(List.of(1, 2, 3, 4, 5, 6, 7));
+        System.out.println("Original ArrayList: " + arrayList);
+        reverseList(arrayList);
+        System.out.println("Reversed ArrayList: " + arrayList);
+
+        // LinkedList
+        LinkedList<Integer> linkedList = new LinkedList<>(List.of(1, 2, 3, 4, 5, 6, 7));
+        System.out.println("Original LinkedList: " + linkedList);
+        reverseList(linkedList);
+        System.out.println("Reversed LinkedList: " + linkedList);
+    }
+}
+
Index: .idea/libraries/KotlinJavaRuntime.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/KotlinJavaRuntime.xml b/.idea/libraries/KotlinJavaRuntime.xml
new file mode 100644
--- /dev/null	(date 1739258048385)
+++ b/.idea/libraries/KotlinJavaRuntime.xml	(date 1739258048385)
@@ -0,0 +1,23 @@
+<component name="libraryTable">
+  <library name="KotlinJavaRuntime" type="repository">
+    <properties maven-id="org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.0.21" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/2.0.21/kotlin-stdlib-jdk8-2.0.21.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/2.0.21/kotlin-stdlib-2.0.21.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/2.0.21/kotlin-stdlib-jdk7-2.0.21.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/2.0.21/kotlin-stdlib-jdk8-2.0.21-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/2.0.21/kotlin-stdlib-2.0.21-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/2.0.21/kotlin-stdlib-jdk7-2.0.21-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/2.0.21/kotlin-stdlib-jdk8-2.0.21-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/2.0.21/kotlin-stdlib-2.0.21-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/2.0.21/kotlin-stdlib-jdk7-2.0.21-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/implementbankingsystem/ImplementBankingSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/implementbankingsystem/ImplementBankingSystem.java b/src/DAY02-CollectionsFramework/src/main/java/com/implementbankingsystem/ImplementBankingSystem.java
new file mode 100644
--- /dev/null	(date 1739423191967)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/implementbankingsystem/ImplementBankingSystem.java	(date 1739423191967)
@@ -0,0 +1,94 @@
+/*
+Implement a Banking System
+Description:
+HashMap stores customer accounts (AccountNumber -> Balance).
+TreeMap sorts customers by balance.
+Queue processes withdrawal requests.
+*/
+package com.implementbankingsystem;
+import java.util.*;
+
+class BankingSystem {
+    private final Map<String, Double> accountBalances = new HashMap<>();
+    private final TreeMap<String, Double> sortedAccounts = new TreeMap<>(Comparator.comparingDouble(accountBalances::get));
+    private final Queue<String> withdrawalQueue = new LinkedList<>();
+
+    // Add a new account
+    public void addAccount(String accountNumber, double initialBalance) {
+        accountBalances.put(accountNumber, initialBalance);
+        sortedAccounts.put(accountNumber, initialBalance);
+    }
+
+    // Deposit money
+    public void deposit(String accountNumber, double amount) {
+        if (accountBalances.containsKey(accountNumber)) {
+            double newBalance = accountBalances.get(accountNumber) + amount;
+            accountBalances.put(accountNumber, newBalance);
+            sortedAccounts.put(accountNumber, newBalance);
+        } else {
+            System.out.println("Account not found!");
+        }
+    }
+
+    // Request withdrawal
+    public void requestWithdrawal(String accountNumber) {
+        if (accountBalances.containsKey(accountNumber)) {
+            withdrawalQueue.add(accountNumber);
+        } else {
+            System.out.println("Invalid account number!");
+        }
+    }
+
+    // Process withdrawals
+    public void processWithdrawals(double amount) {
+        while (!withdrawalQueue.isEmpty()) {
+            String accountNumber = withdrawalQueue.poll();
+            if (accountBalances.get(accountNumber) >= amount) {
+                double newBalance = accountBalances.get(accountNumber) - amount;
+                accountBalances.put(accountNumber, newBalance);
+                sortedAccounts.put(accountNumber, newBalance);
+                System.out.println("Withdrawal of $" + amount + " from Account " + accountNumber + " successful.");
+            } else {
+                System.out.println("Insufficient balance in Account " + accountNumber);
+            }
+        }
+    }
+
+    // Get account balance
+    public double getBalance(String accountNumber) {
+        return accountBalances.getOrDefault(accountNumber, 0.0);
+    }
+
+    // Get all accounts sorted by balance
+    public Map<String, Double> getSortedAccounts() {
+        List<Map.Entry<String, Double>> sortedList = new ArrayList<>(accountBalances.entrySet());
+        sortedList.sort(Map.Entry.comparingByValue());
+
+        Map<String, Double> sortedByBalance = new LinkedHashMap<>();
+        for (Map.Entry<String, Double> entry : sortedList) {
+            sortedByBalance.put(entry.getKey(), entry.getValue());
+        }
+        return sortedByBalance;
+    }
+}
+
+public class ImplementBankingSystem {
+    public static void main(String[] args) {
+        BankingSystem bank = new BankingSystem();
+
+        bank.addAccount("A101", 5000);
+        bank.addAccount("A102", 1200);
+        bank.addAccount("A103", 8000);
+
+        bank.deposit("A101", 1000);
+        System.out.println("Balance of A101: $" + bank.getBalance("A101"));
+
+        bank.requestWithdrawal("A101");
+        bank.requestWithdrawal("A102");
+
+        bank.processWithdrawals(1500);
+
+        System.out.println("\nAccounts sorted by balance:");
+        System.out.println(bank.getSortedAccounts());
+    }
+}
Index: .idea/kotlinc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
new file mode 100644
--- /dev/null	(date 1739258048397)
+++ b/.idea/kotlinc.xml	(date 1739258048397)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Kotlin2JvmCompilerArguments">
+    <option name="jvmTarget" value="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/rotateelementsinalist/RotateElement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/rotateelementsinalist/RotateElement.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/rotateelementsinalist/RotateElement.java
new file mode 100644
--- /dev/null	(date 1739271345067)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/rotateelementsinalist/RotateElement.java	(date 1739271345067)
@@ -0,0 +1,27 @@
+/*
+Rotate Elements in a List
+Rotate the elements of a list by a given number of positions.
+Example:
+Input: [10, 20, 30, 40, 50], rotate by 2 → Output: [30, 40, 50, 10, 20].
+*/
+package com.listinterface.rotateelementsinalist;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class RotateElement {
+
+    public static <T> void rotateList(ArrayList<T> list, int k) {
+        Collections.rotate(list, -k); // Left rotation by k positions
+    }
+
+    public static void main(String[] args) {
+        ArrayList<Integer> arrayList = new ArrayList<>(List.of(10, 20, 30, 40, 50));
+        int k = 2; // Number of positions to rotate left
+
+        System.out.println("Original ArrayList: " + arrayList);
+        rotateList(arrayList, k);
+        System.out.println("Rotated ArrayList: " + arrayList); // Expected Output: [30, 40, 50, 10, 20]
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/c.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/c.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/c.java
new file mode 100644
--- /dev/null	(date 1739338328281)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/c.java	(date 1739338328281)
@@ -0,0 +1,4 @@
+package com.setinterface;
+
+public class c {
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/hospitaltriagesystem/HospitalTriageSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/hospitaltriagesystem/HospitalTriageSystem.java b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/hospitaltriagesystem/HospitalTriageSystem.java
new file mode 100644
--- /dev/null	(date 1739345580691)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/hospitaltriagesystem/HospitalTriageSystem.java	(date 1739345580691)
@@ -0,0 +1,43 @@
+
+/*Hospital Triage System
+Simulate a hospital triage system using a PriorityQueue where patients with higher severity are treated first.
+Example:
+Patients: [("John", 3), ("Alice", 5), ("Bob", 2)] → Order: Alice, John, Bob.
+*/
+package com.queueinterface.hospitaltriagesystem;
+
+import java.util.PriorityQueue;
+import java.util.Comparator;
+
+class Patient {
+    String name;
+    int severity;
+
+    public Patient(String name, int severity) {
+        this.name = name;
+        this.severity = severity;
+    }
+
+    @Override
+    public String toString() {
+        return name + " (Severity: " + severity + ")";
+    }
+}
+
+public class HospitalTriageSystem {
+    public static void main(String[] args) {
+        //PriorityQueue with custom comparator to sort by severity (higher first)
+        PriorityQueue<Patient> queue = new PriorityQueue<>(Comparator.comparingInt((Patient p) -> -p.severity));
+
+        //Adding patients
+        queue.add(new Patient("John", 3));
+        queue.add(new Patient("Alice", 5));
+        queue.add(new Patient("Bob", 2));
+
+        //Processing patients in order of severity
+        System.out.println("Order of treatment:");
+        while (!queue.isEmpty()) {
+            System.out.println(queue.poll());
+        }
+    }
+}
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/reversequeue/ReverseQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/reversequeue/ReverseQueue.java b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/reversequeue/ReverseQueue.java
new file mode 100644
--- /dev/null	(date 1739342505934)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/reversequeue/ReverseQueue.java	(date 1739342505934)
@@ -0,0 +1,35 @@
+/*
+Reverse a Queue
+Reverse the elements of a queue using only queue operations (e.g., add, remove, isEmpty).
+Example:
+Input: [10, 20, 30] → Output: [30, 20, 10].
+*/
+package com.queueinterface.reversequeue;
+import java.util.*;
+
+public class ReverseQueue {
+
+        public static <T> void reverseQueue(Queue<T> queue) {
+            Stack<T> stack = new Stack<>();
+
+            //  Dequeue all elements from queue and push onto the stack
+            while (!queue.isEmpty()) {
+                stack.push(queue.poll());
+            }
+
+            //  Pop elements from stack and enqueue them back into the queue
+            while (!stack.isEmpty()) {
+                queue.add(stack.pop());
+            }
+        }
+
+        public static void main(String[] args) {
+            // Integer Queue
+            Queue<Integer> intQueue = new LinkedList<>(Arrays.asList(10, 20, 30));
+            System.out.println("Original Integer Queue: " + intQueue);
+            reverseQueue(intQueue);
+            System.out.println("Reversed Integer Queue: " + intQueue);
+        }
+    }
+
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/generatebinaryusingqueue/GenerateBinaryNumbersUsingQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/generatebinaryusingqueue/GenerateBinaryNumbersUsingQueue.java b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/generatebinaryusingqueue/GenerateBinaryNumbersUsingQueue.java
new file mode 100644
--- /dev/null	(date 1739343041066)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/generatebinaryusingqueue/GenerateBinaryNumbersUsingQueue.java	(date 1739343041066)
@@ -0,0 +1,37 @@
+
+/*
+Generate Binary Numbers Using a Queue
+Generate the first N binary numbers (as strings) using a queue.
+Example:
+N=5 → Output: ["1", "10", "11", "100", "101"].
+*/
+package com.queueinterface.generatebinaryusingqueue;
+import java.util.*;
+
+public class GenerateBinaryNumbersUsingQueue {
+    public static <T> List<T> generateBinaryNumbers(int N, Queue<T> queue) {
+        List<T> result = new ArrayList<>();
+
+        queue.add((T) "1"); // Start with "1"
+
+        for (int i = 0; i < N; i++) {
+            String current = (String) queue.poll(); // Get the front element
+            result.add((T) current); // Store the binary number
+
+            // Enqueue the next two binary numbers
+            queue.add((T) (current + "0"));
+            queue.add((T) (current + "1"));
+        }
+
+        return result;
+    }
+
+    public static void main(String[] args) {
+        int N = 5;
+        Queue<String> queue = new LinkedList<>();
+
+        // Using the generic method to generate binary numbers
+        System.out.println("First " + N + " binary numbers: " + generateBinaryNumbers(N, queue));
+    }
+}
+
Index: DAY02-CollectionsFramework/setinterface/c.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DAY02-CollectionsFramework/setinterface/c.java b/DAY02-CollectionsFramework/setinterface/c.java
new file mode 100644
--- /dev/null	(date 1739338328281)
+++ b/DAY02-CollectionsFramework/setinterface/c.java	(date 1739338328281)
@@ -0,0 +1,4 @@
+package com.setinterface;
+
+public class c {
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/implementshoppingcart/ImplementShoppingCart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/implementshoppingcart/ImplementShoppingCart.java b/src/DAY02-CollectionsFramework/src/main/java/com/implementshoppingcart/ImplementShoppingCart.java
new file mode 100644
--- /dev/null	(date 1739423001057)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/implementshoppingcart/ImplementShoppingCart.java	(date 1739423001057)
@@ -0,0 +1,75 @@
+/*
+Implement a Shopping Cart
+Description:
+Use HashMap to store product prices.
+Use LinkedHashMap to maintain the order of items added.
+Use TreeMap to display items sorted by price.
+*/
+
+package com.implementshoppingcart;
+import java.util.*;
+
+class ShoppingCart {
+    private final Map<String, Double> priceMap = new HashMap<>();
+    private final Map<String, Double> cartLinkedMap = new LinkedHashMap<>();
+    private final TreeMap<String, Double> cartTreeMap = new TreeMap<>(Comparator.comparingDouble(priceMap::get));
+
+    // Add a product with price
+    public void addProduct(String product, double price) {
+        priceMap.put(product, price);
+        cartLinkedMap.put(product, price);
+        cartTreeMap.put(product, price);
+    }
+
+    // Remove a product
+    public void removeProduct(String product) {
+        priceMap.remove(product);
+        cartLinkedMap.remove(product);
+        cartTreeMap.remove(product);
+    }
+
+    // Get total price
+    public double getTotalPrice() {
+        return cartLinkedMap.values().stream().mapToDouble(Double::doubleValue).sum();
+    }
+
+    // Display items in order added
+    public Map<String, Double> getItemsInOrder() {
+        return new LinkedHashMap<>(cartLinkedMap);
+    }
+
+    // Display items sorted by price
+    public Map<String, Double> getItemsSortedByPrice() {
+        List<Map.Entry<String, Double>> sortedList = new ArrayList<>(cartLinkedMap.entrySet());
+        sortedList.sort(Map.Entry.comparingByValue());
+
+        Map<String, Double> sortedByPrice = new LinkedHashMap<>();
+        for (Map.Entry<String, Double> entry : sortedList) {
+            sortedByPrice.put(entry.getKey(), entry.getValue());
+        }
+        return sortedByPrice;
+    }
+}
+
+public class ImplementShoppingCart {
+    public static void main(String[] args) {
+        ShoppingCart cart = new ShoppingCart();
+
+        cart.addProduct("Laptop", 800.00);
+        cart.addProduct("Mouse", 25.99);
+        cart.addProduct("Keyboard", 45.50);
+        cart.addProduct("Monitor", 199.99);
+
+        System.out.println("Items in order added:");
+        System.out.println(cart.getItemsInOrder());
+
+        System.out.println("\nItems sorted by price:");
+        System.out.println(cart.getItemsSortedByPrice());
+
+        System.out.println("\nTotal Price: $" + cart.getTotalPrice());
+
+        cart.removeProduct("Mouse");
+        System.out.println("\nAfter removing 'Mouse':");
+        System.out.println(cart.getItemsInOrder());
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/findallsubset/FindAllSubsets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/findallsubset/FindAllSubsets.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/findallsubset/FindAllSubsets.java
new file mode 100644
--- /dev/null	(date 1739340550305)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/findallsubset/FindAllSubsets.java	(date 1739340550305)
@@ -0,0 +1,31 @@
+/*
+Find Subsets
+Check if one set is a subset of another.
+Example:
+Set1: {2, 3}, Set2: {1, 2, 3, 4} → Output: true.
+*/
+
+package com.setinterface.findallsubset;
+import java.util.HashSet;
+import java.util.Set;
+
+public class FindAllSubsets {
+    public static <T> boolean isSubset(Set<T> set1, Set<T> set2) {
+        return set2.containsAll(set1); // Check if set1 is a subset of set2
+    }
+
+    public static void main(String[] args) {
+        Set<Integer> set1 = new HashSet<>();
+        Set<Integer> set2 = new HashSet<>();
+
+        set1.add(2);
+        set1.add(3);
+
+        set2.add(1);
+        set2.add(2);
+        set2.add(3);
+        set2.add(4);
+
+        System.out.println("Is set1 a subset of set2:- " + isSubset(set1, set2));
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/designvotingsystem/DesignVotingSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/designvotingsystem/DesignVotingSystem.java b/src/DAY02-CollectionsFramework/src/main/java/com/designvotingsystem/DesignVotingSystem.java
new file mode 100644
--- /dev/null	(date 1739422703144)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/designvotingsystem/DesignVotingSystem.java	(date 1739422703144)
@@ -0,0 +1,67 @@
+/*
+Design a Voting System
+Description: Design a system where:
+Votes are stored in a HashMap (Candidate -> Votes).
+TreeMap is used to display the results in sorted order.
+LinkedHashMap is used to maintain the order of votes.
+*/
+package com.designvotingsystem;
+import java.util.*;
+
+class VotingSystem {
+    private final Map<String, Integer> voteMap = new HashMap<>();
+    private final Map<String, Integer> voteLinkedMap = new LinkedHashMap<>();
+    private final TreeMap<String, Integer> voteTreeMap = new TreeMap<>();
+
+    // Cast a vote for a candidate
+    public void castVote(String candidate) {
+        voteMap.put(candidate, voteMap.getOrDefault(candidate, 0) + 1);
+        voteLinkedMap.put(candidate, voteLinkedMap.getOrDefault(candidate, 0) + 1);
+        voteTreeMap.put(candidate, voteTreeMap.getOrDefault(candidate, 0) + 1);
+    }
+
+    // Get votes in insertion order (LinkedHashMap)
+    public Map<String, Integer> getVotesInOrder() {
+        return new LinkedHashMap<>(voteLinkedMap);
+    }
+
+    // Get votes in sorted order (TreeMap)
+    public Map<String, Integer> getVotesSorted() {
+        return new TreeMap<>(voteTreeMap);
+    }
+
+    // Get votes sorted by highest count (Descending order)
+    public Map<String, Integer> getVotesByCount() {
+        List<Map.Entry<String, Integer>> list = new ArrayList<>(voteMap.entrySet());
+        list.sort((a, b) -> b.getValue().compareTo(a.getValue()));
+
+        Map<String, Integer> sortedByVotes = new LinkedHashMap<>();
+        for (Map.Entry<String, Integer> entry : list) {
+            sortedByVotes.put(entry.getKey(), entry.getValue());
+        }
+        return sortedByVotes;
+    }
+}
+
+public class DesignVotingSystem {
+    public static void main(String[] args) {
+        VotingSystem system = new VotingSystem();
+
+        system.castVote("Alice");
+        system.castVote("Bob");
+        system.castVote("Alice");
+        system.castVote("Charlie");
+        system.castVote("Bob");
+        system.castVote("Alice");
+
+        System.out.println("Votes in insertion order:");
+        System.out.println(system.getVotesInOrder());
+
+        System.out.println("\nVotes in sorted order:");
+        System.out.println(system.getVotesSorted());
+
+        System.out.println("\nVotes sorted by highest count:");
+        System.out.println(system.getVotesByCount());
+    }
+}
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/setinterface/unionandintersectionoftwosets/UnionAndIntersectionOfTwoSets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/unionandintersectionoftwosets/UnionAndIntersectionOfTwoSets.java b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/unionandintersectionoftwosets/UnionAndIntersectionOfTwoSets.java
new file mode 100644
--- /dev/null	(date 1739339687763)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/setinterface/unionandintersectionoftwosets/UnionAndIntersectionOfTwoSets.java	(date 1739339687763)
@@ -0,0 +1,39 @@
+/*
+Union and Intersection of Two Sets
+Given two sets, compute their union and intersection.
+Example:
+Set1: {1, 2, 3}, Set2: {3, 4, 5} → Union: {1, 2, 3, 4, 5}, Intersection: {3}.
+*/
+package com.setinterface.unionandintersectionoftwosets;
+import java.util.HashSet;
+import java.util.Set;
+
+public class UnionAndIntersectionOfTwoSets {
+    public static <T> Set<T> getUnion(Set<T> set1, Set<T> set2) {
+        Set<T> union = new HashSet<>(set1); // Copy set1
+        union.addAll(set2); // Add all elements from set2
+        return union;
+    }
+
+    public static <T> Set<T> getIntersection(Set<T> set1, Set<T> set2) {
+        Set<T> intersection = new HashSet<>(set1); // Copy set1
+        intersection.retainAll(set2); // Keep only common elements
+        return intersection;
+    }
+
+    public static void main(String[] args) {
+        Set<Integer> set1 = new HashSet<>();
+        Set<Integer> set2 = new HashSet<>();
+
+        set1.add(1);
+        set1.add(2);
+        set1.add(3);
+
+        set2.add(3);
+        set2.add(4);
+        set2.add(5);
+
+        System.out.println("Union: " + getUnion(set1, set2));
+        System.out.println("Intersection: " + getIntersection(set1, set2));
+    }
+}
Index: src/DAY02-CollectionsFramework/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/.idea/encodings.xml b/src/DAY02-CollectionsFramework/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1739258369807)
+++ b/src/DAY02-CollectionsFramework/.idea/encodings.xml	(date 1739258369807)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/.gitignore b/src/DAY02-CollectionsFramework/.gitignore
new file mode 100644
--- /dev/null	(date 1739258344281)
+++ b/src/DAY02-CollectionsFramework/.gitignore	(date 1739258344281)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/removeduplicates/RemoveDuplicates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/removeduplicates/RemoveDuplicates.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/removeduplicates/RemoveDuplicates.java
new file mode 100644
--- /dev/null	(date 1739272714311)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/removeduplicates/RemoveDuplicates.java	(date 1739272714311)
@@ -0,0 +1,20 @@
+/*
+Remove Duplicates While Preserving Order
+Remove duplicate elements from a list while maintaining the original order of elements.
+Example:
+Input: [3, 1, 2, 2, 3, 4] → Output: [3, 1, 2, 4].
+*/
+
+package com.listinterface.removeduplicates;
+import java.util.*;
+public class RemoveDuplicates{
+    public static<T> void RemoveDuplicates(List<T> List){
+        Set<T> set = new LinkedHashSet<>(List);
+    }
+    public static void main(String[] args) {
+        List<Integer> numbers = Arrays.asList(3,1,2,2,2,3,4,2,6,4,5,3);
+        List<Integer> uniqueNumbers = new ArrayList<>(new LinkedHashSet<>(numbers));
+        System.out.println(uniqueNumbers);
+    }
+}
+
Index: src/DAY02-CollectionsFramework/src/test/java/com/listinterface/reverselist/ReverseListGenericTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/test/java/com/listinterface/reverselist/ReverseListGenericTest.java b/src/DAY02-CollectionsFramework/src/test/java/com/listinterface/reverselist/ReverseListGenericTest.java
new file mode 100644
--- /dev/null	(date 1739262295072)
+++ b/src/DAY02-CollectionsFramework/src/test/java/com/listinterface/reverselist/ReverseListGenericTest.java	(date 1739262295072)
@@ -0,0 +1,60 @@
+package com.listinterface.reverselist;
+
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import java.util.*;
+
+public class ReverseListGenericTest {
+
+    @Test
+    public void testReverseArrayList() {
+        // Test Case 1: Reverse Integer ArrayList
+        List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
+        ReverseList.reverseArrayList(list1);  // Fixed the method call
+        assertEquals(Arrays.asList(5, 4, 3, 2, 1), list1);
+
+        // Test Case 2: Reverse String ArrayList
+        List<String> list2 = new ArrayList<>(Arrays.asList("A", "B", "C", "D"));
+        ReverseList.reverseArrayList(list2);
+        assertEquals(Arrays.asList("D", "C", "B", "A"), list2);
+
+        // Test Case 3: Edge case with empty ArrayList
+        List<Integer> emptyList = new ArrayList<>();
+        ReverseList.reverseArrayList(emptyList);
+        assertTrue(emptyList.isEmpty());
+    }
+
+    @Test
+    public void testReverseLinkedList() {
+        // Test Case 1: Reverse Integer LinkedList
+        LinkedList<Integer> linkedList1 = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));
+        ReverseList.reverseLinkedList(linkedList1);
+        assertEquals(new LinkedList<>(Arrays.asList(5, 4, 3, 2, 1)), linkedList1);
+
+        // Test Case 2: Reverse String LinkedList
+        LinkedList<String> linkedList2 = new LinkedList<>(Arrays.asList("A", "B", "C", "D"));
+        ReverseList.reverseLinkedList(linkedList2);
+        assertEquals(new LinkedList<>(Arrays.asList("D", "C", "B", "A")), linkedList2);
+
+        // Test Case 3: Edge case with empty LinkedList
+        LinkedList<Integer> emptyLinkedList = new LinkedList<>();
+        ReverseList.reverseLinkedList(emptyLinkedList);
+        assertTrue(emptyLinkedList.isEmpty());
+    }
+
+    @Test
+    public void testReverseArrayListWithSingleElement() {
+        // Edge Case: ArrayList with a single element
+        List<Integer> singleElementList = new ArrayList<>(Arrays.asList(42));
+        ReverseList.reverseArrayList(singleElementList);
+        assertEquals(Collections.singletonList(42), singleElementList);
+    }
+
+    @Test
+    public void testReverseLinkedListWithSingleElement() {
+        // Edge Case: LinkedList with a single element
+        LinkedList<Integer> singleElementLinkedList = new LinkedList<>(Arrays.asList(42));
+        ReverseList.reverseLinkedList(singleElementLinkedList);
+        assertEquals(Collections.singletonList(42), singleElementLinkedList);
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/implementstackusingqueues/ImplementStackUsingQueues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/implementstackusingqueues/ImplementStackUsingQueues.java b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/implementstackusingqueues/ImplementStackUsingQueues.java
new file mode 100644
--- /dev/null	(date 1739346695790)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/queueinterface/implementstackusingqueues/ImplementStackUsingQueues.java	(date 1739346695790)
@@ -0,0 +1,85 @@
+/*
+Implement a Stack Using Queues
+Implement a stack data structure using two queues and support push, pop, and top operations.
+Example:
+Push 1, 2, 3 → Pop → Output: 3.
+*/
+
+package com.queueinterface.implementstackusingqueues;
+import java.util.*;
+
+class StackUsingQueues<T> {
+    private Queue<T> queue1;
+    private Queue<T> queue2;
+
+    public StackUsingQueues() {
+        queue1 = new LinkedList<>();
+        queue2 = new LinkedList<>();
+    }
+
+    // Push an element onto the stack
+    public void push(T element) {
+        // Add element to queue2
+        queue2.add(element);
+
+        // Move all elements from queue1 to queue2 to maintain LIFO order
+        while (!queue1.isEmpty()) {
+            queue2.add(queue1.poll());
+        }
+
+        // Swap the references of queue1 and queue2
+        Queue<T> temp = queue1;
+        queue1 = queue2;
+        queue2 = temp;
+    }
+
+    // Pop the top element from the stack
+    public T pop() {
+        if (queue1.isEmpty()) {
+            throw new NoSuchElementException("Stack is empty");
+        }
+        return queue1.poll();
+    }
+
+    // Get the top element without removing it
+    public T top() {
+        if (queue1.isEmpty()) {
+            throw new NoSuchElementException("Stack is empty");
+        }
+        return queue1.peek();
+    }
+
+    // Check if the stack is empty
+    public boolean isEmpty() {
+        return queue1.isEmpty();
+    }
+}
+
+public class ImplementStackUsingQueues {
+    public static void main(String[] args) {
+        // Create a stack using two queues
+        StackUsingQueues<Integer> stack = new StackUsingQueues<>();
+
+        // Push elements onto the stack
+        stack.push(1);
+        stack.push(2);
+        stack.push(3);
+
+        // Pop the top element (should be 3)
+        System.out.println("Popped: " + stack.pop()); // Output: 3
+
+        // Get the top element without removing it (should be 2)
+        System.out.println("Top: " + stack.top()); // Output: 2
+
+        // Pop the top element (should be 2)
+        System.out.println("Popped: " + stack.pop()); // Output: 2
+
+        // Pop the last element (should be 1)
+        System.out.println("Popped: " + stack.pop()); // Output: 1
+
+        // Check if the stack is empty (should be true)
+        System.out.println("Is stack empty? " + stack.isEmpty()); // Output: true
+    }
+}
+
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/groupobjectsbyproperty/GroupObjectsByProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/groupobjectsbyproperty/GroupObjectsByProperty.java b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/groupobjectsbyproperty/GroupObjectsByProperty.java
new file mode 100644
--- /dev/null	(date 1739354424795)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/groupobjectsbyproperty/GroupObjectsByProperty.java	(date 1739354424795)
@@ -0,0 +1,46 @@
+/*
+Group Objects by Property
+Given a list of Employee objects, group them by their department using a Map<Department, List<Employee>>.
+Example:
+Employees: [Alice (HR), Bob (IT), Carol (HR)] → Output: HR: [Alice, Carol], IT: [Bob].
+*/
+package com.mapinterface.groupobjectsbyproperty;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+class Employee {
+    String name;
+    String department;
+
+    Employee(String name, String department) {
+        this.name = name;
+        this.department = department;
+    }
+
+    @Override
+    public String toString() {
+        return name;
+    }
+}
+public class GroupObjectsByProperty {
+    public static void main(String[] args) {
+        List<Employee> employees = new ArrayList<>();
+        employees.add(new Employee("Alice", "HR"));
+        employees.add(new Employee("Bob", "IT"));
+        employees.add(new Employee("Carol", "HR"));
+
+        Map<String, List<Employee>> employeesByDepartment = new HashMap<>();
+
+        for (Employee employee : employees) {
+            employeesByDepartment
+                    .computeIfAbsent(employee.department, k -> new ArrayList<>())
+                    .add(employee);
+        }
+
+        employeesByDepartment.forEach((department, empList) -> {
+            System.out.println(department + ": " + empList);
+        });
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findfrequencyofelement/FrequencyCounter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findfrequencyofelement/FrequencyCounter.java b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findfrequencyofelement/FrequencyCounter.java
new file mode 100644
--- /dev/null	(date 1739269838104)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/listinterface/findfrequencyofelement/FrequencyCounter.java	(date 1739269838104)
@@ -0,0 +1,28 @@
+/*
+Find Frequency of Elements
+Given a list of strings, count the frequency of each element and return the results in a Map<String, Integer>.
+Example:
+Input: ["apple", "banana", "apple", "orange"] → Output: {apple=2, banana=1, orange=1}.
+ */
+
+package com.listinterface.findfrequencyofelement;
+
+import java.util.*;
+
+public class FrequencyCounter {
+    public static Map<String, Integer> countFrequency(List<String> list) {
+        Map<String, Integer> frequencyMap = new HashMap<>();
+
+        for (String item : list) {
+            frequencyMap.put(item, frequencyMap.getOrDefault(item, 0) + 1);
+        }
+        return frequencyMap;
+    }
+    public static void main(String[] args) {
+        List<String> inputList = List.of("apple", "banana", "apple", "orange");
+        Map<String, Integer> result = countFrequency(inputList);
+
+        System.out.println(result);
+    }
+}
+
Index: src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/wordfrequencycounter/WordFrequencyCounter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/wordfrequencycounter/WordFrequencyCounter.java b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/wordfrequencycounter/WordFrequencyCounter.java
new file mode 100644
--- /dev/null	(date 1739354847702)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/wordfrequencycounter/WordFrequencyCounter.java	(date 1739354847702)
@@ -0,0 +1,36 @@
+/*
+Word Frequency Counter
+Read a text file and count the frequency of each word using a HashMap. Ignore case and punctuation.
+Example:
+Input: "Hello world, hello Java!" → Output: {hello=2, world=1, java=1}
+*/
+package com.mapinterface.wordfrequencycounter;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class WordFrequencyCounter {
+    public static void main(String[] args) {
+        String fileName = "M:\\CapgeminiTraining\\Week-4\\src\\DAY02-CollectionFramework\\src\\main\\java\\com\\mapinterface\\wordfrequencycounter\\WordFrequencyCounter.java";
+        Map<String, Integer> wordCount = new HashMap<>();
+
+        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] words = line.toLowerCase().replaceAll("[^a-zA-Z]", " ").split("\\s+");
+                for (String word : words) {
+                    if (word.isEmpty()) {
+                        continue;
+                    }
+                    wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        System.out.println(wordCount);
+    }
+}
Index: src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/invertmap/InvertMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/invertmap/InvertMap.java b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/invertmap/InvertMap.java
new file mode 100644
--- /dev/null	(date 1739352606460)
+++ b/src/DAY02-CollectionsFramework/src/main/java/com/mapinterface/invertmap/InvertMap.java	(date 1739352606460)
@@ -0,0 +1,42 @@
+/*
+Invert a Map
+Invert a Map<K, V> to produce a Map<V, K>. Handle duplicate values by storing them in a list.
+Example:
+Input: {A=1, B=2, C=1} → Output: {1=[A, C], 2=[B]}.
+*/
+
+package com.mapinterface.invertmap;
+import java.util.*;
+
+public class InvertMap {
+
+    public static void main(String[] args) {
+        // Original map
+        Map<String, Integer> originalMap = new HashMap<>();
+        originalMap.put("A", 1);
+        originalMap.put("B", 2);
+        originalMap.put("C", 1);
+
+        // Inverting the map
+        Map<Integer, List<String>> invertedMap = invertMap(originalMap);
+
+        // Display the inverted map
+        System.out.println(invertedMap);
+    }
+
+    // Method to invert the map
+    public static <K, V> Map<V, List<K>> invertMap(Map<K, V> originalMap) {
+        Map<V, List<K>> invertedMap = new HashMap<>();
+
+        // Iterate over each entry in the original map
+        for (Map.Entry<K, V> entry : originalMap.entrySet()) {
+            K key = entry.getKey();
+            V value = entry.getValue();
+
+            // If value already exists as a key in the inverted map, add the current key to the list
+            invertedMap.computeIfAbsent(value, k -> new ArrayList<>()).add(key);
+        }
+
+        return invertedMap;
+    }
+}
